====================
SEA WOLF DISASSEMBLY
====================

' ----------------
' global variables
' ----------------
$02 scr_ptr_lo:  (low-byte) pointer to screen memory
$03 scr_ptr_hi:  (hight-byte) pointer to screen memory
$04 clr_ptr_lo: (low-byte) pointer to colour memory
$05 clr_ptr_hi: (high-byte) pointer to colour memory
$06 ret_ptr_lo:  (low-byte) address to return to after call to draw_inline_text
$07 ret_ptr_hi:  (high-byte) address to return to after call to draw_inline_text
$08 var0:  (maybe a generic loop index variable)
           (maybe relates to paddle position sometimes?)
  - set to #$01 in print_remaining_game_time
  - cmp at $e03b
  - sta at $e0eb
  - cmp at $e10c
  - sta at $e11b
  - dec at $e11d
  - sta at $e26b
  - sbc at $e270 (subtracting from #$f8 / dec248)
  - sty at $e390 (set to #$04)
  - dec at $e39b (this makes me think that var0 is a generic loop index variable)
  - sta at $F0FB (in relation to paddle position)
$09 var0-1:
  - sta at $e100
  - adc at $e17e
  - sta at $e3e7
  - inc at $e3fb
  - dec at $e3fe
  - sta at $e40a  (maybe it stores the current paddle position?)
  - lda at $e519  (seems to store the char representing the missile shot to be drawn to the screen)
$0a var0-2: (can either be #$01 or #$ff) - mirror orientation of current ship?
  - sta at $e123
  - sta at $e195  (can either be #$01 or #$ff)
$0e var0-6:
  - sta at $e4b0  ; (set it to #$08)
$0f var0-7:
  - sta at $e47c
$10 var0-8:
  - sta at $e481
$11 var1:  (the x-position of current ship?)
  - sbc at $e035
  - lda at $e081
  - lda at $e8b7
$12 var2:  (the y-position of current ship?)
  - sta at $E5AE
  - inc at $e641
  - inc at $e643
  - lda at $E8D4
  - sbc at $e1fa
$13 txt_x_pos:  the x-position to draw text from  :  set to #$12 (18) in print_remaining_game_time
$14 txt_y_pos:  the y-position (row) to draw text from  :  set to #$18 (24) in print_remaining_game_time
           - set to #$00 in init_game_screen
           - set to #$17  (23) in prepare_game_screen
$16 var4:
  - set to #$FF in start_game
  - ldy at $e3e1
$17 initial_game_time  (in minutes?)
$18 buff_spr2spr_coll:  buffered value of sprite-to-sprite collision
$19 buff_spr2back_coll:  buffered value of sprite-to-background collision
$1B dunno1:
  - asl in $E897
  - eor in $e89d
  - eor in $e8a0
$1C dunno2:
  - rol in $e899
$1D p1_score_lo: var5: the low two-digits of player1 score : set to #$00 in start_game
$1E p2_score_lo: var6: the low two-digits of player2 score : set to #$00 in start_game
$1F p1_score_hi: var7: the high two-digits of player1 score : set to #$00 in start_game
$20 p2_score_hi: var8: the high two-digits of player2 score : set to #$00 in start_game
$21 high_score_lo: the low two-digits of high score
$22 high_score_hi: the high two-digits of high score
$23 var5: (possibly a general index var used for different purposes in different places)
          (sometimes used as an index var to choose between player1 or 2)
  - ldx at $e09c
  - ldx at $e0b6
  - ldx at $e0e7  (relates to index into array2[] / $49)
  - sta at $e1d4  (sets it to #$03)
  - ldx at $e23c
  - ldx at $e25e
  - dec at $e275
  - lda at $e27d  (sets it to #$01)
  - ldx at $e2fe  (later used as index to p1_num_missiles,y) (gives me impression it is a generic index var)
  - lda at $e45f  (set to #$07)
$24 dunno3:
  - lda at $e1c8
  - sta at $e1ce  (set to #$0b / dec11)
$25 dunno4:
  - lda at $e308
  - sta at $e30a (bit 1 is toggled)
$26 secs_in_minute_left:  var9:  ; maybe a seconds in the minute countdown
  - set to #$3B (59) in init_game_vars
$27 decimal_secs_in_minutes_left:
  - lda at $e84e
$28 minutes_left:  game_time:  (in minutes?) (in decimal mode)
$2a whatis2:
  - dec at $e9a9
  - sta at $e9af (sets it to #$05)
$2b whatis3:
  - sta at $e955 (set to #$03)
$2c whatis4:
  - lda at $e97f
$2d whatis5:
  - lda at $e967
  - dec at $e96b (only if whatis5 is not yet zero)
  - sta at $e970 (if it was previousy zero, it will be now set to #$03)
$2e whatis6:
  - sta at $e486  (stores some colour choice between yellow or light-brown)
$2f-$30 missile_reload_timers[2]: countdown-to-zero timers for each player, to decide when missiles for player are reloaded
    - timers start at #$B4 (180) - equates to "TIME TO LOAD: 3 SECONDS."
    - when timer reaches #$78 (120) -  msg is "TIME TO LOAD: 2 SECONDS."
    - when timer reaches #$3C (60)  -  msg is "TIME TO LOAD: 1 SECONDS."
  - lda at $e283
  - dec at $e287
  - sta at $e306 (set to #$B4/dec180) it sets only if no# missiles left after shot is zero
$31 p1_num_missiles:
  - set to #$04 in init_game_vars
  - sta at $e2a4 (set to #$04)  (for reload?)
$32 p2_num_missiles: set to #$04 in init_game_vars
$33-$34 arrayA[2]:  (some detail relating to player1 and 2)
  - sta at $e2c3  (set to #$00)
  - sta at $e2d3  (set to #$ff)
  - lda at $e2d5
$33 var10: set to same value as initial_game_time in start_game
$34 var11: set to same value as initial_game_time in start_game
$35-36 arrayBB[2]: (some detail relating to player1 and 2)
                   (maybe it is the current player1/2 x-positions)
                   - submarine chars can only be drawn on columns 0 to 39
                   - but I think the value stored here is x4 (so from 0 to 159)
                     (as it is divided by 4 later in $e410
  - lda at $e2e4
  - lda at $e3e5
  - sta at $e442 (it is later divided by 4 and used as an x-pos to draw the player's submarine)
$37-38 arrayE[2]: (some detail relating to player1 and 2)
  - cmp at $e3e9
  - sta at $e3f4
$39-$3c array0[4]: some details on ships (perhaps if currently visible/enabled or not, 0 or 1)
                   (the negative-flag seems critical, and causes 'biggish_jump')
  - read at $e006
  - read at $e049
  - sta at $e04f
  - sta at $e0ba to #$00
  - lda at $e106
  (maybe keeps track of object collisions? index is sprite no#)
$3d-xx array0-1[x]:  maybe a copy of ship visibility array0?
  - lda at $e074
  - dec at $e078
$41-xx array0-2[x]: table of ship-types in reversed notation? (02=freighter, 01=cruiser, 00=ptboat)
  - lda at $e07d
$45-48 array1[4]: x-pos of all ships?
  - accessed in $e000 routine
  - lda at $e011
  - sta at $e088
  - lda at $e12f
  - cmp at $e133
$49-4c array2[4]: y-pos of all ships?
  - lda at $e00d
  - lda at $e10a
$4d-50 array2-1[4]:  ; mirror orientation of all ships (01 = normal, FF = reversed?)
  - adc at $e084
  - lda at $e09e
  - sta at $e0e9
  - lda at $e121
$51-54 array3[4]: ship-type of all ships (idx 0-3) #$00=freighter, #$01=cruiser, #$02=p.t. boat
                  (seems to have values of either #$00 or #$01)
  - ldy at $e01c
  - lda at $e05b
  - ldy at $e08e
  - ora at $e0a2
  - lda at $e179
  - adc at $e17c
  (index to the type of ship on screen?)
$55-xx array4[x]: explosion duration timer of each ship (and buoy)
                  (is divided by 8 to decide which explosion frame to show - F9, F5 or F1)
  - sta at $e053
  - dec at $e0c2
  - lda at $e0c6
$5d-$60 array5[4]: (possibly data relating to player1 and 2)
  - lda at $e1d8 (with index of var5)
  - sta at $e218 (sets it to #$ff) (if xpos of buoy <12 or >=254)
  - lda at $e224
  - sta at $e253 (sets it to #$00 - on occasions when x-pos > 148)
  - sta at $e349 (set to #$01)
$5d var15: set to #$01 in init_game_vars
$5e var16: set to #$01 in init_game_vars
$61-xx:  array6[x]:  (array of all ship x-positions?)
  - lda at $e1df (with index of var5)
$61-xx arrayC[x]:
  - sta at $e320 (set to #$00)
$61 var20: set to #$00 in init_game_vars
$62 var21: set to #$44 (68) in init_game_vars
$65-$68:  buoys_ypos[4]:  (array of all buoy y-positions)
          - (have values of either #$60 or #$80)
          - (the absolute sprite x-pos for these is #$92 and #$B2)
          - (that's a difference of #$32)
  - lda at $e1e3 (with index of var5)
$65 var25: set to #$60 (96) in init_game_vars
$66 var26: set to #$60 (96) in init_game_vars
$69-$6c: array8[4]:
  - sta at $e21c (set to #$18 / dec24)
  - dec at $e260 (indexed by var5)
  - lda at $e264 (indexed by var5)
$6d-74 array9[8]:  (x-positions of all ships?)
  - read at $e031
  - read at $e200 (with ,y index at 7)
  - sta at $e2e9
$75-$7c array10[8]:  (y-positions of all ships?)
  - read at $e025
  - lda at $e1f4  (starting from index=7)
  - lda at $e465 (starting from index=7)
$7d-xx array12[x]:
  - sta at $e046
  - sta at $e215 (sets it to #$ff)
$85-$A4 array14[32]:  contains the ship-index that was spawned recently?
  - sta at $e111
  - ldx at $e11f
  - sta at $e48c  ; resets entire array to zeroes
  - sta at $e4ba  ; stores from the middle of the table and onwards 
$fe-$ff array30[2]: (some detail relating to player1 and 2)
  - adc at $F109
  - sta at $F11F


$02a8-xxxx arrayF[x]:
  - (some sort of screen row buffer of row contents copied from some_screen_row_related_data / $ee48)
  - sta at $e435

$0300-xxxx arrayG[x]:
  - sta at $e4fa  (seems to copy across a chunk of array14?)

'--------------------------------

game_mechanics_iteration:
------------------------
  ' has logic to spawn new ships when needed
$E000     M_immnn:1 A9 03    LDA  #$03
$E002        M_nn:1 85 23    STA  var5  ; $23
-big_retry:
$E004        M_nn:1 A6 23    LDX  var5  ; $23
$E006       M_nnX:1 B5 39    LDA  array0,x  ; $39,X  ; perhaps visibility of all ships
$E008        M_rr:1 D0 03    BNE  +skip1  ; $E00D
$E00A      M_nnnn:2 4C D5 E0 JMP  +big_jump_due_to_$39,x_being_zero  ; $E0D5  ; if $39,x is zero, then we do this jump
+skip1:
$E00D       M_nnX:1 B5 49    LDA  array2,x  ; $49,X  ; y-pos of all ships?
$E00F        M_nn:1 85 12    STA  var2  ; $12  ; y-pos of current ship?
$E011       M_nnX:1 B5 45    LDA  array1,x  ; $45,X  ; x-pos of all ships?
$E013        M_nn:1 85 11    STA  var1  ; $11  ; x-pos of current ship?
$E015        M_nn:1 A5 19    LDA  buff_spr2back_coll  ; $19
$E017     M_nnnnX:2 3D 38 EE AND  sprite_bitfields,x  ; $EE38,X  ; x = currently assessed ship (from 0 - 3)
$E01A        M_rr:1 F0 54    BEQ  +no_spr2back_collision_detected  ; $E070  ; if no sprite-to-back collision for this sprite-x, then branch
; if we're here, then there was a ship to missile-fire collision
$E01C       M_nnX:1 B4 51    LDY  array3,x  ; $51,X  
$E01E     M_nnnnY:2 B9 0E EE LDA  some_table,y  ; $EE0E,Y  ; maybe it can only have a value of #$00 or #$01
$E021        M_nn:1 85 08    STA  var0  ; $08
$E023     M_immnn:1 A0 07    LDY  #$07
-retry_stuff:
$E025     M_nnnnY:2 B9 75 00 LDA  array10,y  ; $0075,Y  ; y-position of all ships?
$E028        M_rr:1 F0 15    BEQ  +skip_stuff  ; $E03F
$E02A      M_impl:0 38       SEC
$E02B        M_nn:1 E5 12    SBC  var2  ; $12  ; y-pos of current ship?
$E02D     M_immnn:1 C9 10    CMP  #$10  ; (dec16)
$E02F        M_rr:1 B0 0E    BCS  +skip_stuff  ; $E03F  ; branch if >= 16
$E031     M_nnnnY:2 B9 6D 00 LDA  array9,y  ; $006D,Y  ; x-pos of all ships?
$E034      M_impl:0 38       SEC
$E035        M_nn:1 E5 11    SBC  var1  ; $11  ; x-pos of current ship?
$E037     M_immnn:1 C9 FE    CMP  #$FE
$E039        M_rr:1 B0 09    BCS  +skip_more_stuff  ; $E044  ; branch if >= 254
$E03B        M_nn:1 C5 08    CMP  var0  ; $08
$E03D        M_rr:1 90 05    BCC  +skip_more_stuff  ; $E044
+skip_stuff:
$E03F      M_impl:0 88       DEY
$E040        M_rr:1 10 E3    BPL  -retry_stuff  ; $E025
$E042        M_rr:1 D0 2C    BNE  +no_spr2back_collision_detected  ; $E070
+skip_more_stuff:
$E044     M_immnn:1 A9 FF    LDA  #$FF
$E046     M_nnnnY:2 99 7D 00 STA  array12,y  ; $007D,Y
$E049       M_nnX:1 B5 39    LDA  array0,x  ; $39,X
$E04B        M_rr:1 30 23    BMI  +no_spr2back_collision_detected  ; $E070
$E04D     M_immnn:1 A9 FF    LDA  #$FF
$E04F       M_nnX:1 95 39    STA  array0,x  ; $39,X
$E051     M_immnn:1 A9 18    LDA  #$18
$E053       M_nnX:1 95 55    STA  array4,x  ; $55,X
$E055     M_nnnnY:2 B9 AC EF LDA  some_colour_chooser_table,y  ; $EFAC,Y  ; seems to choose either yellow or orange?
$E058     M_nnnnX:2 9D 27 D0 STA  $D027,X  ; $d027-$d02e = sprite 0-7 colours
$E05B       M_nnX:1 B5 51    LDA  array3,x  ; $51,X   (index to the type of ship?)
$E05D      M_impl:0 AA       TAX
$E05E     M_nnnnX:2 BD 1F EE LDA  ship_scores,x  ; $EE1F,X
$E061      M_impl:0 48       PHA
$E062      M_impl:0 98       TYA
$E063         M_A:0 4A       LSR
$E064         M_A:0 4A       LSR
$E065      M_impl:0 AA       TAX
$E066      M_impl:0 68       PLA  ; A = score of ship that was hit (in units of 100's - i.e. skipping trailing two digits)
$E067      M_nnnn:2 20 E0 E6 JSR  add_points_to_score_then_update_high_score_and_reprint  ; $E6E0
$E06A      M_nnnn:2 20 5D E9 JSR  trigger_voice3_sound  ; $E95D  ; (probably explosion sound?)
$E06D      M_nnnn:2 4C BD E1 JMP  +super_duper_big_jump  ; $E1BD
+no_spr2back_collision_detected:
$E070       M_nnX:1 B5 39    LDA  array0,x  ; $39,X
$E072        M_rr:1 30 4E    BMI  +biggish_jump  ; $E0C2
$E074       M_nnX:1 B5 3D    LDA  array0-1,x  ; $3D,X
$E076        M_rr:1 F0 05    BEQ  +small_jump  ; $E07D
$E078       M_nnX:1 D6 3D    DEC  array0-1,x  ; $3D,X
$E07A      M_nnnn:2 4C BD E1 JMP  +super_duper_big_jump  ; $E1BD
+small_jump:
$E07D       M_nnX:1 B5 41    LDA  array0-2,x  ; $41,X
$E07F       M_nnX:1 95 3D    STA  array0-1,x  ; $3D,X
$E081        M_nn:1 A5 11    LDA  var1  ; $11  ; x-position of current ship
$E083      M_impl:0 18       CLC
$E084       M_nnX:1 75 4D    ADC  array2-1,x  ; $4D,X  ; mirror orientation of ships (#$01 normal, #$ff reversed)
$E086        M_nn:1 85 11    STA  var1  ; $11
$E088       M_nnX:1 95 45    STA  array1,x  ; $45,X  ; x-pos of all ships
$E08A     M_immnn:1 C9 A0    CMP  #$A0  ; dec160
$E08C        M_rr:1 B0 28    BCS  +skip_some_stuff  ; $E0B6  ; branch if >= 160
$E08E       M_nnX:1 B4 51    LDY  array3,x  ; $51,X  ; ship-type of all ships
$E090      M_impl:0 18       CLC
$E091     M_nnnnY:2 79 0E EE ADC  some_table,y  ; $EE0E,Y  ; some amount to add to x-pos, depending on ship-type
$E094     M_immnn:1 C9 A0    CMP  #$A0  ; dec160
$E096        M_rr:1 B0 1E    BCS  +skip_some_stuff  ; $E0B6  ; branch if new x-pos is >= 160  ; ship has gone out of range?
$E098      M_impl:0 8A       TXA
$E099      M_nnnn:2 20 B4 E8 JSR  move_curr_ship_position  ; $E8B4  (curr ship x,y vals in var1/$11 and var2/$12)
$E09C        M_nn:1 A6 23    LDX  var5  ; $23  ; current ship-index
$E09E       M_nnX:1 B5 4D    LDA  array2-1,x  ; $4D,X  ; mirror orientation of ships? (#$01 normal, #$ff reversed?)
$E0A0     M_immnn:1 29 04    AND  #$04
$E0A2       M_nnX:1 15 51    ORA  array3,x  ; $51,X  ; ship-type of all ships
$E0A4      M_impl:0 18       CLC
$E0A5     M_immnn:1 69 EE    ADC  #$EE  ; sprite ee is sprite-pointer to the 1st boat (ee=freighter), ef=cruiser, f0=pt-boat
                                        ; if ships reversed, then f2=freighter, f3=cruiser, f4 = pt-boat
$E0A7     M_nnnnX:2 9D F8 07 STA  $07F8,X  ; $07f8 to $07ff = sprite pointers
$E0AA      M_nnnn:2 20 25 F1 JSR  set_sprite_colour  ; $F125
$E0AD      M_impl:0 EA       EOM
$E0AE      M_impl:0 EA       EOM
$E0AF      M_impl:0 8A       TXA
$E0B0      M_nnnn:2 20 DD E8 JSR  turn_on_sprite_A  ; $E8DD
-skip_back:
$E0B3      M_nnnn:2 4C BD E1 JMP  +super_duper_big_jump  ; $E1BD
+skip_some_stuff:
  ' ship has gone out of range, time to switch it off? 
$E0B6        M_nn:1 A6 23    LDX  var5  ; $23  ; idx to current ship
$E0B8     M_immnn:1 A9 00    LDA  #$00
$E0BA       M_nnX:1 95 39    STA  array0,x  ; $39,X
$E0BC      M_impl:0 8A       TXA
$E0BD      M_nnnn:2 20 E8 E8 JSR  turn_off_sprite_A  ; $E8E8
$E0C0        M_rr:1 F0 F1    BEQ  -skip_back  ; $E0B3  ; branch if all sprites are off?
+biggish_jump:
$E0C2       M_nnX:1 D6 55    DEC  array4,x  ; $55,X
$E0C4        M_rr:1 F0 F0    BEQ  -skip_some_stuff  ; $E0B6
$E0C6       M_nnX:1 B5 55    LDA  array4,x  ; $55,X
$E0C8         M_A:0 4A       LSR
$E0C9         M_A:0 4A       LSR
$E0CA         M_A:0 4A       LSR  ; divide a by 8
$E0CB      M_impl:0 A8       TAY
$E0CC     M_nnnnY:2 B9 C5 E1 LDA  explosion_sprite_pointers,y  ; $E1C5,Y
$E0CF     M_nnnnX:2 9D F8 07 STA  $07F8,X
$E0D2      M_nnnn:2 4C BD E1 JMP  +super_duper_big_jump  ; $E1BD
+big_jump_due_to_$39,x_being_zero:
  ' we jumped here due to current ship not being visible
$E0D5      M_nnnn:2 20 93 E8 JSR  dunno_stuff  ; $E893  ; it will return some magic value in A (based on dunno1 and dunno2)
$E0D8     M_immnn:1 C9 03    CMP  #$03
$E0DA        M_rr:1 90 03    BCC  $E0DF  ; if A value < 3 then branch
$E0DC      M_nnnn:2 4C BD E1 JMP  +super_duper_big_jump  ; $E1BD
$E0DF      M_nnnn:2 20 93 E8 JSR  dunno_stuff  ; $E893  ; dunno_stuff returns another magic value in A
$E0E2     M_immnn:1 29 20    AND  #$20  ; this might set bit 5 or result in zero
$E0E4      M_impl:0 18       CLC
$E0E5     M_immnn:1 69 18    ADC  #$18  ; A can either be #$18 (24) or #$38 (56)
$E0E7        M_nn:1 A6 23    LDX  var5  ; $23
$E0E9       M_nnX:1 95 49    STA  array2,x  ; $49,X  ; possibly y-pos of all ships
$E0EB        M_nn:1 85 08    STA  var0  ; $08  ; let var0 = y-pos of current ship
$E0ED      M_nnnn:2 20 93 E8 JSR  dunno_stuff ; $E893  ; get some other magic value in A
$E0F0     M_immnn:1 C9 50    CMP  #$50  ; dec80
$E0F2        M_rr:1 90 0A    BCC  +skip_to_lda_2  ; $E0FE
$E0F4     M_immnn:1 C9 A0    CMP  #$A0  ; dec160
$E0F6        M_rr:1 90 03    BCC  +skip_to_lda_1  ; $E0FB
$E0F8     M_immnn:1 A9 00    LDA  #$00
$E0FA      M_nnnn:2 2C A9 01 BIT  $01A9
  +skip_to_lda_1:
  $E0FB     M_immnn:1 A9 01    LDA  #$01
$E0FD      M_nnnn:2 2C A9 02 BIT  $02A9
  +skip_to_lda_2:
  $E0FE     M_immnn:1 A9 02    LDA  #$02
$E100        M_nn:1 85 09    STA  var0-1  ; $09  ; maybe this could me new ship-type of newly spawned ship
$E102     M_immnn:1 A0 00    LDY  #$00
$E104     M_immnn:1 A2 03    LDX  #$03
-retry2:
$E106       M_nnX:1 B5 39    LDA  array0,x  ; $39,X  ; is ship at this index visible yet?
$E108        M_rr:1 F0 0B    BEQ  +skip2  ; $E115    ; branch if not visible?
$E10A       M_nnX:1 B5 49    LDA  array2,x  ; $49,X  ; y-pos of all ships?
$E10C        M_nn:1 C5 08    CMP  var0  ; $08  ; y-pos of current ship?
$E10E        M_rr:1 D0 05    BNE  +skip2  ; $E115  ; not the same y-pos as the prior ship at this index? then branch
$E110      M_impl:0 8A       TXA
$E111     M_nnnnY:2 99 85 00 STA  array14,y  ; $0085,Y
$E114      M_impl:0 C8       INY
+skip2:
$E115      M_impl:0 CA       DEX
$E116        M_rr:1 10 EE    BPL  -retry2  ; $E106
$E118      M_impl:0 98       TYA
$E119        M_rr:1 F0 6F    BEQ  +big_skip1  ; $E18A  ; branch if all ships presently visible?
$E11B        M_nn:1 85 08    STA  var0  ; $08  ; number of ships not in range/visible yet?
$E11D        M_nn:1 C6 08    DEC  var0  ; $08
$E11F        M_nn:1 A6 85    LDX  array14  ; $85
$E121       M_nnX:1 B5 4D    LDA  array2-1,x  ; $4D,X  ; mirror orientation of all ships? (01=normal, ff=reversed)
$E123        M_nn:1 85 0A    STA  var0-2  ; $0A
$E125        M_rr:1 30 29    BMI  +skip3  ; $E150
$E127     M_immnn:1 C0 01    CPY  #$01
$E129        M_rr:1 F0 1E    BEQ  +skip4  ; $E149
-jmp_retry:
$E12B     M_immnn:1 A0 00    LDY  #$00
-retry3:
$E12D       M_nnY:1 B6 85    LDX  array14,y  ; $85,Y
$E12F       M_nnX:1 B5 45    LDA  array1,x  ; $45,X
$E131       M_nnY:1 B6 86    LDX  array14+1,y  ; $86,Y
$E133       M_nnX:1 D5 45    CMP  array1,x  ; $45,X
$E135        M_rr:1 90 0D    BCC  +skip5  ; $E144
$E137        M_rr:1 F0 0B    BEQ  +skip5 ; $E144
$E139     M_nnnnY:2 B9 85 00 LDA  array14,y  ; $0085,Y
$E13C       M_nnY:1 96 85    STX  array14,y ; $85,Y
$E13E     M_nnnnY:2 99 86 00 STA  array14+1,y  ; $0086,Y
$E141      M_nnnn:2 4C 2B E1 JMP  -jmp_retry  ; $E12B
+skip5:
$E144      M_impl:0 C8       INY
$E145        M_nn:1 C4 08    CPY  var0  ; $08
$E147        M_rr:1 90 E4    BCC  -retry3  ; $E12D
+skip4:
$E149        M_nn:1 A6 85    LDX  array14  ; $85  ; ship-index that was spawned recently?
$E14B       M_nnX:1 B5 45    LDA  array1,x  ; $45,X  ; x-pos of all ships
$E14D      M_nnnn:2 4C 77 E1 JMP  +another_skip  ; $E177
+skip3:
$E150     M_immnn:1 C0 01    CPY  #$01
$E152        M_rr:1 F0 1C    BEQ  +skip6  ; $E170
-jmp_back_a_little:
$E154     M_immnn:1 A0 00    LDY  #$00
-retry4:
$E156       M_nnY:1 B6 85    LDX  array14,y  ; $85,Y
$E158       M_nnX:1 B5 45    LDA  array1,x  ; $45,X
$E15A       M_nnY:1 B6 86    LDX  array14+1,y  ; $86,Y
$E15C       M_nnX:1 D5 45    CMP  array1,x  ; $45,X
$E15E        M_rr:1 B0 0B    BCS  +skip7  ; $E16B
$E160     M_nnnnY:2 B9 85 00 LDA  array14,y  ; $0085,Y
$E163       M_nnY:1 96 85    STX  array14,y  ; $85,Y
$E165     M_nnnnY:2 99 86 00 STA  array14+1,y  ; $0086,Y
$E168      M_nnnn:2 4C 54 E1 JMP  -jmp_back_a_little  ; $E154
+skip7:
$E16B      M_impl:0 C8       INY
$E16C        M_nn:1 C4 08    CPY  var0  ; $08
$E16E        M_rr:1 90 E6    BCC  -retry4  ; $E156
+skip6:
$E170        M_nn:1 A6 85    LDX  array14  ; $85
$E172     M_immnn:1 A9 88    LDA  #$88  ; dec136
$E174      M_impl:0 38       SEC
$E175       M_nnX:1 F5 45    SBC  array1,x  ; $45,X
+another_skip:
$E177        M_nn:1 85 08    STA  var0  ; $08  ; hold x-pos of current ship?
$E179       M_nnX:1 B5 51    LDA  array3,x  ; $51,X  ; (index to ship-type?)
$E17B         M_A:0 0A       ASL  ; multiply by 2
$E17C       M_nnX:1 75 51    ADC  array3,x  ; $51,X  ; a bit like multiply by 3  ; freighter=00, cruiser=3, ptboat=6
$E17E        M_nn:1 65 09    ADC  var0-1  ; $09  ; newly-spawned ship-type
$E180      M_impl:0 AA       TAX
$E181     M_nnnnX:2 BD 13 EE LDA  some_other_table,x  ; $EE13,X
$E184        M_nn:1 C5 08    CMP  var0  ; $08  ; x-pos of current ship?
$E186        M_rr:1 B0 35    BCS  +super_duper_big_jump  ; $E1BD  ; branch if >= x-pos of current ship
$E188        M_rr:1 90 0D    BCC  +little_skip1  ; $E197
+big_skip1:
$E18A      M_nnnn:2 20 93 E8 JSR  dunno_stuff  ; $E893  ; put magic number in A
$E18D      M_impl:0 A8       TAY
$E18E        M_rr:1 30 03    BMI  +skip_to_lda_ff  ; $E193  ; if neg-bit is on, then branch
$E190     M_immnn:1 A9 01    LDA  #$01  ; current ship = normal
$E192      M_nnnn:2 2C A9 FF BIT  $FFA9
  +skip_to_lda_ff:
  $E193     M_immnn:1 A9 FF    LDA  #$FF  ; current ship = mirrored
$E195        M_nn:1 85 0A    STA  var0-2  ; $0A  ; set curr ship to mirrored
+little_skip1:
$E197        M_nn:1 A6 23    LDX  var5  ; $23  ; idx to curr ship
$E199     M_immnn:1 A9 01    LDA  #$01
$E19B       M_nnX:1 95 39    STA  array0,x  ; $39,X  ; ship visibility table, set it to 1/visible
$E19D       M_nnX:1 95 3D    STA  array0-1,x  ; $3D,X
$E19F        M_nn:1 A5 09    LDA  var0-1  ; $09  ; newly-spawned ship-type?
$E1A1       M_nnX:1 95 51    STA  array3,x  ; $51,X  ; ship-type of all ships
$E1A3      M_impl:0 A8       TAY
$E1A4     M_nnnnY:2 B9 1C EE LDA  yet_another_table,y  ; $EE1C,Y
$E1A7       M_nnX:1 95 41    STA  array0-2,x  ; $41,X  ; table of ship-types in revered notation? (02=freighter, 01=cruiser, 00=pt)
$E1A9     M_immnn:1 C0 02    CPY  #$02  ; is ship-type = pt-boat?
$E1AB        M_rr:1 D0 03    BNE  +tiny_skip  ; $E1B0  ; branch if not pt-boat
$E1AD      M_nnnn:2 20 3C E9 JSR  v1_reset_and_gate_off  ; $E93C  ; turn off v1 if we've spawned a pt-boat
+tiny_skip:
$E1B0        M_nn:1 A5 0A    LDA  var0-2  ; $0A  ; current ship mirror-state ($01=normal, $ff=mirrored)
$E1B2       M_nnX:1 95 4D    STA  array2-1,x  ; $4D,X  ; mirror orientation of all ships
$E1B4        M_rr:1 10 03    BPL  +skip_to_lda_00  ; $E1B9  ; branch if normal ship-orientation
$E1B6     M_immnn:1 A9 88    LDA  #$88  ; a = #$88 (dec136) for reversed ship-mirror orientation
$E1B8      M_nnnn:2 2C A9 00 BIT  $00A9
  +skip_to_lda_00:
  $E1B9     M_immnn:1 A9 00    LDA  #$00  ; a = 0 for normal ship-mirror orientation
$E1BB       M_nnX:1 95 45    STA  array1,x  ; $45,X  ; x-pos of all ships
+super_duper_big_jump:
$E1BD        M_nn:1 C6 23    DEC  var5  ; $23  ; idx to curr ship
$E1BF        M_rr:1 30 03    BMI  +skip_to_rts  ; $E1C4
$E1C1      M_nnnn:2 4C 04 E0 JMP  -big_retry  ; $E004
+skip_to_rts:
$E1C4      M_impl:0 60       RTS

sprite ee: (freighter)

+------------------------+
| *  *  *                |
|   *    *               |
|                        |
|        **              |
|        **  **          |
|   **   **  **          |
|   **   **  **          |
|   **   **  ***         |
|** **   *******      ***|
|*****  ** *** **  ******|
|* ********* *** ********|
|*** * ***************** |
|*********************** |
| *********************  |
| ********************   |
|  ******************    |
|                        |
|                        |
|                        |
|                        |
|                        |
+------------------------+

 

sprite ef: (cruiser)

+------------------------+
|                        |
|                        |
|                        |
|       * *              |
|  *   *                 |
|    *    **             |
|         **             |
|      ** **             |
|      ** *****          |
|      ** ** ***    **** |
|      ** **** *     *   |
|***  ***********   *****|
|*********************** |
|**********************  |
| ********************   |
|  ******************    |
|                        |
|                        |
|                        |
|                        |
|                        |
+------------------------+

 

sprite f0: (p.t. boat)

    p.t. boat = "Patrol Torpedo" boat was a motor torpedo boat used by the United States Navy in World War II. It was small, fast, and inexpensive to build, valued for its maneuverability and speed

+------------------------+
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|       *                |
|       **               |
|       ****             |
|      ** * *            |
|  **  **********        |
|  *************         |
|   ***********          |
|   **********           |
|                        |
|                        |
|                        |
|                        |
|                        |
+------------------------+


sprite f2: (freighter - reversed)

+------------------------+
|                *  *  * |
|               *    *   |
|                        |
|              **        |
|          **  **        |
|          **  **   **   |
|          **  **   **   |
|         ***  **   **   |
|***      *******   ** **|
|******  ** *** **  *****|
|******** *** ********* *|
| ***************** * ***|
| ***********************|
|  ********************* |
|   ******************** |
|    ******************  |
|                        |
|                        |
|                        |
|                        |
|                        |
+------------------------+


sprite f3: (cruiser - reversed)

+------------------------+
|                        |
|                        |
|                        |
|              * *       |
|                 *   *  |
|             **    *    |
|             **         |
|             ** **      |
|          ***** **      |
| ****    *** ** **      |
|   *     * **** **      |
|*****   ***********  ***|
| ***********************|
|  **********************|
|   ******************** |
|    ******************  |
|                        |
|                        |
|                        |
|                        |
|                        |
+------------------------+


sprite f4: (pt boat - reversed)

+------------------------+
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|                *       |
|               **       |
|             ****       |
|            * * **      |
|        **********  **  |
|         *************  |
|          ***********   |
|           **********   |
|                        |
|                        |
|                        |
|                        |
|                        |
+------------------------+

explosion_sprite_pointers:
 :000E1C5 F9 F5 F1


sprite F9
+------------------------+
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|     *****              |
|   **********           |
|  * **********          |
| * * **** * ****        |
| *   ** ***   **        |
|*   ********   **       |
|*  *** ******   *       |
|  * ****** * * *        |
|** *** *** ******       |
|                        |
|                        |
|                        |
|                        |
|                        |
+------------------------+

	
sprite F5
+------------------------+
|  ** *     ****         |
| * ** *   **  **        |
|**   * * * *** *        |
|*  *****  *   *         |
|  *   *  * * **         |
| *     * * **  *        |
|   *** * **             |
|  **  * **  ***         |
| *   ***** *   *        |
|    ** *******          |
|   *  ***** * *         |
|  *  ** ***  * *        |
| *  ***** **            |
|   * ********           |
|  * ****** * *          |
|** *** *** *****        |
|                        |
|                        |
|                        |
|                        |
|                        |
+------------------------+

	
sprite F1
+------------------------+
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|                        |
|    **                  |
|   *  **  ***           |
|  *  **  **  *          |
| ** * *****             |
| ***** ***  ***         |
|** **  ****   **        |
|**** *** *** ***        |
|                        |
|                        |
|                        |
|                        |
|                        |
+------------------------+


buoy_logic:
'---------
$E1C8        M_nn:1 A5 24    LDA  dunno3  ; $24
$E1CA        M_rr:1 10 04    BPL  +skip1  ; $E1D0
$E1CC     M_immnn:1 A9 0B    LDA  #$0B  ; dec11
$E1CE        M_nn:1 85 24    STA  dunno3  ; $24
+skip1:
$E1D0        M_nn:1 C6 24    DEC  dunno3  ; $24
$E1D2     M_immnn:1 A9 03    LDA  #$03
$E1D4        M_nn:1 85 23    STA  var5  ; $23
$E1D6        M_nn:1 A6 23    LDX  var5  ; $23
$E1D8       M_nnX:1 B5 5D    LDA  array5,x  ; $5D,X
$E1DA        M_rr:1 D0 03    BNE  +skip2  ; $E1DF  ; branch if non-zero
-big_retry:
   ' loops on a decrementing var5 until all the way to zero
$E1DC      M_nnnn:2 4C 75 E2 JMP  +jmp_to_end  ; $E275
+skip2:
$E1DF       M_nnX:1 B5 61    LDA  array6,x  ; $61,X
$E1E1        M_nn:1 85 11    STA  var1  ; $11  (x-position of current ship?)
$E1E3       M_nnX:1 B5 65    LDA  buoys_ypos,x   ; $65,X  ; (array of all ship y-positions)
$E1E5        M_nn:1 85 12    STA  var2  ; $12  (y-position of the current ship?)
$E1E7      M_impl:0 8A       TXA
$E1E8     M_immnn:1 09 04    ORA  #$04
$E1EA      M_impl:0 A8       TAY
$E1EB        M_nn:1 A5 19    LDA  buff_spr2back_coll  ; $19
$E1ED     M_nnnnY:2 39 38 EE AND  or_bitfields,y  ; $EE38,Y
$E1F0        M_rr:1 F0 32    BEQ  +skip_due_to_no_spr_to_back_collision  ; $E224  ; branch if the bit isn't on (no spr-to-back collision with this sprite)
$E1F2     M_immnn:1 A0 07    LDY  #$07
-retry1:
$E1F4     M_nnnnY:2 B9 75 00 LDA  array10,y  ; $0075,Y  ; y-pos of all ships?
$E1F7        M_rr:1 F0 15    BEQ  +skip_on_zero  ; $E20E
$E1F9      M_impl:0 38       SEC
$E1FA        M_nn:1 E5 12    SBC  var2  ; $12  ; (y-position of the current ship)
$E1FC     M_immnn:1 C9 15    CMP  #$15  ; dec21
$E1FE        M_rr:1 B0 0E    BCS  +branch_if_ypos_>=21  ; $E20E  ; branch if >= dec21
$E200     M_nnnnY:2 B9 6D 00 LDA  array9,y  ; $006D,Y
$E203      M_impl:0 38       SEC
$E204        M_nn:1 E5 11    SBC  var1  ; $11  ; (x-position of the current ship)
$E206     M_immnn:1 C9 FE    CMP  #$FE  ; dec254
$E208        M_rr:1 B0 09    BCS  +branch_if_xpos_>=254  ; $E213 ; branch if >= 254
$E20A     M_immnn:1 C9 0C    CMP  #$0C  ; dec12
$E20C        M_rr:1 90 05    BCC  +branch_if_xpos_<12  ; $E213
+skip_on_zero:
+branch_if_ypos_>=21:
$E20E      M_impl:0 88       DEY
$E20F        M_rr:1 10 E3    BPL  -retry1  ; $E1F4
$E211        M_rr:1 D0 11    BNE  +skip_due_to_no_spr_to_back_collision  ; $E224
+branch_if_xpos_<12:
+branch_if_xpos_>=254:
$E213     M_immnn:1 A9 FF    LDA  #$FF
$E215     M_nnnnY:2 99 7D 00 STA  array12,y  ; $007D,Y
$E218       M_nnX:1 95 5D    STA  array5,x  ; $5D,X
$E21A     M_immnn:1 A9 18    LDA  #$18  ; dec24
$E21C       M_nnX:1 95 69    STA  array8,x  ; $69,X
$E21E      M_nnnn:2 20 5D E9 JSR  trigger_voice3_sound  ; $E95D  ; (probably explosion sound?)
$E221      M_nnnn:2 4C 75 E2 JMP  +jmp_to_end  ; $E275
+skip_due_to_no_spr_to_back_collision:
$E224       M_nnX:1 B5 5D    LDA  array5,x  ; $5D,X
$E226        M_rr:1 30 36    BMI  +skip_on_neg  ; $E25E
$E228        M_nn:1 A5 24    LDA  $24
$E22A        M_rr:1 D0 49    BNE  +jmp_to_end  ; $E275
$E22C        M_nn:1 E6 11    INC  var1  ; $11  ; x-pos of current ship
$E22E        M_nn:1 A5 11    LDA  var1  ; $11
$E230     M_immnn:1 C9 94    CMP  #$94  ; 148
$E232        M_rr:1 B0 1D    BCS  +skip_if_xpos_>=148  ; $E251
$E234       M_nnX:1 95 61    STA  array6,x  ; $61,X  (array of all ship x-positions)
$E236      M_impl:0 8A       TXA
$E237     M_immnn:1 09 04    ORA  #$04
$E239      M_nnnn:2 20 B4 E8 JSR  move_curr_ship_position  ; $E8B4  (curr ship x,y vals in var1/$11 and var2/$12)
$E23C        M_nn:1 A6 23    LDX  var5  ; $23
$E23E     M_immnn:1 A9 FA    LDA  #$FA  ; sprite fa (afd buoy)
$E240     M_nnnnX:2 9D FC 07 STA  $07FC,X  ; sprite-pointers for sprites 4-7
$E243     M_immnn:1 A9 01    LDA  #$01
$E245     M_nnnnX:2 9D 2B D0 STA  $D02B,X  ; sprite 4-7 colour (set it to white for the buoy)
$E248      M_impl:0 8A       TXA
$E249     M_immnn:1 09 04    ORA  #$04
$E24B      M_nnnn:2 20 DD E8 JSR  turn_on_sprite_A  ; $E8DD
$E24E      M_nnnn:2 4C 75 E2 JMP  +jmp_to_end  ; $E275
+skip_if_xpos_>=148:
-retry_if_zero:
$E251     M_immnn:1 A9 00    LDA  #$00
$E253       M_nnX:1 95 5D    STA  array5,x  ; $5D,X
$E255      M_impl:0 8A       TXA
$E256     M_immnn:1 09 04    ORA  #$04
$E258      M_nnnn:2 20 E8 E8 JSR  turn_off_sprite_A  ; $E8E8
$E25B      M_nnnn:2 4C 75 E2 JMP  +jmp_to_end  ; $E275
+skip_on_neg:
$E25E        M_nn:1 A6 23    LDX  var5  ; $23
$E260       M_nnX:1 D6 69    DEC  array8,x  ; $69,X
$E262        M_rr:1 F0 ED    BEQ  -retry_if_zero  ; $E251
$E264       M_nnX:1 B5 69    LDA  array8,x  ; $69,X
$E266         M_A:0 4A       LSR
$E267         M_A:0 4A       LSR
$E268         M_A:0 4A       LSR  ; divide by 8
$E269     M_immnn:1 29 03    AND  #$03
$E26B        M_nn:1 85 08    STA  var0  ; $08
$E26D     M_immnn:1 A9 F8    LDA  #$F8  ; dec248  (prepare buoy explosion sprite pointer)
$E26F      M_impl:0 38       SEC
$E270        M_nn:1 E5 08    SBC  var0  ; $08
$E272     M_nnnnX:2 9D FC 07 STA  $07FC,X  ; sprite-pointers for sprites 4-7
                                           ; sprite-pointer can be set to anything between $F5 - $F8  (maybe $F6 to $F8 really)
+jmp_to_end:
$E275        M_nn:1 C6 23    DEC  var5  ; $23
$E277        M_rr:1 30 03    BMI  +skip_to_rts  ; $E27C
$E279      M_nnnn:2 4C D6 E1 JMP  -big_retry  ; $E1D6
+skip_to_rts:
$E27C      M_impl:0 60       RTS


sprite F6: (buoy explosion?)

+------------------------+
|   *  ** *  *   ** **   |
|  *  **       * *   **  |
| ***   **  ** ***    ** |
| **  *  **   * ** ** ** |
|  ** * * **   **     *  |
|***** ***    ***  *** **|
| ** **   ** ***  **  ** |
|  **  *** * *  **** **  |
|   **  ** *   *    **   |
|    **  ***  ***  **    |
|     ****  **  ****     |
|      **   **   **      |
|     ****  **  ****     |
|    **  ** ** **  **    |
|   **    ******    **   |
|  **      ****      **  |
| ********************** |
|*** *** ***  *** *** ***|
|*** *** ***  *** *** ***|
|*** *** ***  *** *** ***|
| ********************** |
+------------------------+


sprite F7: (buoy explosion?)

+------------------------+
|  *    * *  *   **   *  |
| *   **       * *     * |
|** *   *   *    *      *|
|* *          * *  ** ***|
|*  *          **     * *|
|***               *** **|
| ** **   *    *   *   * |
| ***  *** *    ***  **  |
|** **  ** *   *     *   |
| *  *   ***  * *  **    |
|*    ****  **  **** *   |
| **   **   **   **    * |
|      ***  **      **** |
| *  *   ** ** **  **    |
|    *    *** **     *   |
|  **      **        **  |
| *    ***  ****     *** |
|**    * ***   *  *   * *|
|***      **  *** *   * *|
|*   *** * *  *   *** ***|
| * * *********  ******* |
+------------------------+


sprite F8:  (buoy explosion?)

+------------------------+
|   ** ** * ** ****  *   |
|     **       * *       |
| * *   *   *    *    ** |
|  *          * *  ** ** |
| * *                 * *|
|***               *** **|
| ** **            *   * |
| ***  *          *      |
|** **               **  |
| *                     *|
|*    *            * * **|
| **   *               **|
|*                  **** |
| *  *      *  *   **   *|
|    *         *     *  *|
|  **      **        **  |
|**    ***  ****     *** |
| *  * * ***      *   * *|
| **      ** ***  *   * *|
|    *** *  * *     *   *|
|   *** *  *  * * * **   |
+------------------------+


sprite FA: (buoy)

+------------------------+
|      ************      |
|     *   *    *   *     |
|     * * * **** * *     |
|     *   *   ** * *     |
|     * * * ****   *     |
|**    ************    **|
| **      ******      ** |
|  **      ****      **  |
|   **    ******    **   |
|    **  ** ** **  **    |
|     ****  **  ****     |
|      **   **   **      |
|     ****  **  ****     |
|    **  ** ** **  **    |
|   **    ******    **   |
|  **      ****      **  |
| ********************** |
|*** *** ***  *** *** ***|
|*** *** ***  *** *** ***|
|*** *** ***  *** *** ***|
| ********************** |
+------------------------+


handle_missile_firing_and_state:
'------------------------------
$E27D     M_immnn:1 A9 01    LDA  #$01  ; var5 is set to #$01 to indicate (index to) player2 
                                        ; (it is set later at $E357 to #$00 to indicate player1)
$E27F        M_nn:1 85 23    STA  var5  ; $23
-big_retry:
$E281        M_nn:1 A6 23    LDX  var5  ; $23
$E283       M_nnX:1 B5 2F    LDA  missile_reload_timers,x  ; $2F,X
$E285        M_rr:1 F0 22    BEQ  +skip_if_zero  ; $E2A9
$E287       M_nnX:1 D6 2F    DEC  missile_reload_timers,x  ; $2F,X
$E289       M_nnX:1 B5 2F    LDA  missile_reload_timers,x  ; $2F,X
$E28B        M_rr:1 F0 15    BEQ  +skip_if_dec_to_zero  ; $E2A2
$E28D     M_immnn:1 C9 78    CMP  #$78  ; dec120
$E28F        M_rr:1 F0 04    BEQ  +skip_if_=_120  ; $E295
$E291     M_immnn:1 C9 3C    CMP  #$3C  ; dec60
$E293        M_rr:1 D0 14    BNE  +skip_if_not_60  ; $E2A9
+skip_if_=_120:
$E295      M_impl:0 8A       TXA  ; a=0 for player1, a=1 for player2
$E296        M_rr:1 D0 05    BNE  +skip1  ; $E29D  ; branch if player2
$e298      m_nnnn:2 ce c2 07 dec  $07c2   ; row24 - column2 on char screen (decrements the TIME TO LOAD: x SECONDS.) for player1
                                          ; (it might be a black/invisible character that is used as a temp var) 
$E29B        M_rr:1 D0 0C    BNE  +skip_if_07c2_not_zero  ; $E2A9
+skip1:
$E29D      M_nnnn:2 CE DB 07 DEC  $07DB   ; row24 - column27 on char screen  (decrements the TIME TO LOAD: x SECONDS.) for player2
$E2A0        M_rr:1 D0 07    BNE  +skip_if_07db_not_zero  ; $E2A9
+skip_if_dec_to_zero:
$E2A2     M_immnn:1 A9 04    LDA  #$04
$E2A4       M_nnX:1 95 31    STA  p1_num_missiles,x  ; $31,X
$E2A6      M_nnnn:2 20 5F E3 JSR  redraw_torpedo_amount_indicator  ; $E35F
+skip_if_07db_not_zero:
+skip_if_07c2_not_zero:
+skip_if_not_60:
+skip_if_zero:
$E2A9        M_nn:1 A5 23    LDA  var5  ; $23
$E2AB        M_nn:1 A4 16    LDY  var4  ; $16
$E2AD        M_rr:1 D0 0A    BNE  +skip_if_var4_not_zero  ; $E2B9
$E2AF      M_nnnn:2 20 93 E8 JSR  dunno_stuff  ; $E893
$E2B2     M_immnn:1 C9 03    CMP  #$03
$E2B4        M_rr:1 90 12    BCC  +skip_if_<_3  ; $E2C8  ; branch if less than 3
$E2B6      M_nnnn:2 4C BF E2 JMP  +skip_jmp  ; $E2BF
+skip_if_var4_not_zero:
$E2B9      M_nnnn:2 20 83 E7 JSR  read_paddle_fire_button  ; $E783
$E2BC      M_impl:0 AA       TAX
$E2BD        M_rr:1 D0 09    BNE  +paddle_fires_pressed  ; $E2C8  ; branch if any paddle fires pressed
+skip_jmp:
$E2BF        M_nn:1 A6 23    LDX  var5  ; $23
$E2C1     M_immnn:1 A9 00    LDA  #$00
$E2C3       M_nnX:1 95 33    STA  arrayA,x  ; $33,X  (something to do with game time?)
$E2C5      M_nnnn:2 4C 57 E3 JMP  +big_jmp_to_near_end  ; $E357
+skip_if_<_3:
+paddle_fires_pressed:
$E2C8        M_nn:1 A6 23    LDX  var5  ; $23
$E2CA       M_nnX:1 B5 33    LDA  arrayA,x  ; $33,X  ; (something to do with game time?)
$E2CC        M_rr:1 F0 03    BEQ  +skip_if_arrayA_idx_val_is_zero  ; $E2D1
$E2CE      M_nnnn:2 4C 57 E3 JMP  +big_jmp_to_near_end  ; $E357
+skip_if_arrayA_idx_val_is_zero:
$E2D1     M_immnn:1 A9 FF    LDA  #$FF
$E2D3       M_nnX:1 95 33    STA  arrayA,x  ; $33,X
$E2D5       M_nnX:1 B5 2F    LDA  missile_reload_timers,x  ; $2F,X
$E2D7        M_rr:1 F0 03    BEQ  +skip_if_arrayB_idx_val_is_zero  ; $E2DC
$E2D9      M_nnnn:2 4C 57 E3 JMP  +big_jmp_to_near_end  ; $E357
+skip_if_arrayB_idx_val_is_zero:
$E2DC      M_impl:0 8A       TXA
$E2DD         M_A:0 0A       ASL
$E2DE         M_A:0 0A       ASL  ; multiply by 4
$E2DF      M_impl:0 18       CLC
$E2E0       M_nnX:1 75 31    ADC  p1_num_missiles,x  ; $31,X
$E2E2      M_impl:0 A8       TAY
$E2E3      M_impl:0 88       DEY
$E2E4       M_nnX:1 B5 35    LDA  arrayBB,x  ; $35,X
$E2E6      M_impl:0 18       CLC
$E2E7     M_immnn:1 69 07    ADC  #$07
$E2E9     M_nnnnY:2 99 6D 00 STA  array9,y  ; $006D,Y
$E2EC     M_immnn:1 A9 A0    LDA  #$A0
$E2EE     M_nnnnY:2 99 75 00 STA  array10,y  ; $0075,Y
$E2F1     M_immnn:1 A9 00    LDA  #$00
$E2F3     M_nnnnY:2 99 7D 00 STA  array12,y  ; $007D,Y
$E2F6       M_nnX:1 D6 31    DEC  p1_num_missiles,x  ; $31,X
$E2F8      M_nnnn:2 20 5F E3 JSR  redraw_torpedo_amount_indicator  ; $E35F
$E2FB      M_nnnn:2 20 53 E9 JSR  play_fire_shoot_sound_on_v2  ; $E953
$E2FE        M_nn:1 A6 23    LDX  var5  ; $23
$E300       M_nnX:1 B5 31    LDA  p1_num_missiles,x  ; $31,X
$E302        M_rr:1 D0 53    BNE  +big_jmp_to_near_end  ; $E357  ; if player still has missiles, do branch
$E304     M_immnn:1 A9 B4    LDA  #$B4  ; dec180
$E306       M_nnX:1 95 2F    STA  missile_reload_timers,x  ; $2F,X
$E308        M_nn:1 A5 25    LDA  dunno4  ; $25
$E30A     M_immnn:1 49 02    EOR  #$02  ; toggle bit1
$E30C        M_nn:1 85 25    STA  dunno4  ; $25
$E30E      M_impl:0 AA       TAX
$E30F       M_nnX:1 B5 5D    LDA  array5,x  ; $5D,X
$E311        M_rr:1 F0 07    BEQ  +skip_if_array5_idx_val_is_zero  ; $E31A
$E313       M_nnX:1 B5 5E    LDA  array5+1,x  ; $5E,X
$E315        M_rr:1 F0 13    BEQ  +skip_if_array5+1_idx_val_is_zero  ; $E32A
$E317      M_nnnn:2 4C 57 E3 JMP  +big_jmp_to_near_end  ; $E357
+skip_if_array5_idx_val_is_zero:
$E31A       M_nnX:1 B5 5E    LDA  array5+1,x ; $5E,X
$E31C        M_rr:1 D0 1C    BNE  +skip_if_array5+1_idx_val_is_not_zero  ; $E33A
$E31E     M_immnn:1 A9 00    LDA  #$00
$E320       M_nnX:1 95 61    STA  arrayC,x  ; $61,X
$E322      M_impl:0 18       CLC
$E323     M_immnn:1 69 44    ADC  #$44  ; dec68
$E325       M_nnX:1 95 62    STA  arrayC+1,x  ; $62,X
$E327      M_nnnn:2 4C 47 E3 JMP  +modest_jmp_near_end  ; $E347
+skip_if_array5+1_idx_val_is_zero:
$E32A       M_nnX:1 B5 61    LDA  arrayC,x  ; $61,X
$E32C     M_immnn:1 C9 4C    CMP  #$4C  ; dec76
$E32E        M_rr:1 B0 03    BCS  branch_if_arrayC_idx_val_>=76  ; $E333
$E330     M_immnn:1 69 44    ADC  #$44  ; dec68
$E332      M_nnnn:2 2C E9 44 BIT  $44E9
  branch_if_arrayC_idx_val_>=76:
  $E333     M_immnn:1 E9 44    SBC  #$44  ; dec68
$E335       M_nnX:1 95 62    STA  arrayC+1,x  ; $62,X
$E337      M_nnnn:2 4C 47 E3 JMP  +modest_jmp_near_end  ; $E347
+skip_if_array5+1_idx_val_is_not_zero:
$E33A       M_nnX:1 B5 62    LDA  arrayC+1,x  ; $62,X
$E33C     M_immnn:1 C9 4C    CMP  #$4C  ; dec76
$E33E        M_rr:1 B0 03    BCS  branch_if_arrayC+1_idx_val_>=76  ; $E343
$E340     M_immnn:1 69 44    ADC  #$44
$E342      M_nnnn:2 2C E9 44 BIT  $44E9
  branch_if_arrayC+1_idx_val_>=76:
  $E343     M_immnn:1 E9 44    SBC  #$44
$E345       M_nnX:1 95 61    STA  arrayC,x  ; $61,X
+modest_jmp_near_end:
$E347     M_immnn:1 A9 01    LDA  #$01
$E349       M_nnX:1 95 5D    STA  array5,x  ; $5D,X
$E34B       M_nnX:1 95 5E    STA  array5+1,x  ; $5E,X
$E34D      M_impl:0 8A       TXA
$E34E         M_A:0 4A       LSR
$E34F      M_impl:0 A8       TAY
$E350     M_nnnnY:2 B9 22 EE LDA  possible_buoy_y_positions,y  ; $EE22,Y
$E353       M_nnX:1 95 65    STA  buoys_ypos,x  ; $65,X
$E355       M_nnX:1 95 66    STA  buoys_ypos+1,x  ; $66,X
+big_jmp_to_near_end:
$E357        M_nn:1 C6 23    DEC  var5  ; $23  ; decrement player index from player2 to player1
$E359        M_rr:1 30 03    BMI  $E35E
$E35B      M_nnnn:2 4C 81 E2 JMP  -big_retry  ; $E281
$E35E      M_impl:0 60       RTS


redraw_torpedo_amount_indicator:
'------------------------------
$E35F       M_nnX:1 B5 31    LDA  p1_num_missiles,x  ; $31,X
$E361      M_impl:0 48       PHA
$E362      M_impl:0 8A       TXA
$E363        M_rr:1 D0 03    BNE  +still_have_missiles  ; $E368
$E365     M_immnn:1 A9 01    LDA  #$01
$E367      M_nnnn:2 2C A9 1A BIT  $1AA9
  +still_have_missiles:
  $E368     M_immnn:1 A9 1A    LDA  #$1A  ; dec26
$E36A        M_nn:1 85 13    STA  txt_x_pos  ; $13
$E36C     M_immnn:1 A9 17    LDA  #$17  ; dec23
$E36E        M_nn:1 85 14    STA  txt_y_pos  ; $14
$E370      M_nnnn:2 20 C0 E6 JSR  adjust_scr_and_clr_ptr_locations  ; $E6C0
$E373     M_immnn:1 A9 26    LDA  #$26  ; ' ' space character
$E375     M_immnn:1 A0 00    LDY  #$00
-retry2:
$E377     M_immnn:1 A2 0D    LDX  #$0D  ; 13
-retry_clear_loop:
$E379      M_InnY:1 91 02    STA  ($02),Y   ; draw 13 spaces in the missile area, starting at either (1,23) for no missiles,
                                            ; or (26,23) for have missiles.
$E37B      M_impl:0 C8       INY
$E37C      M_impl:0 CA       DEX
$E37D        M_rr:1 D0 FA    BNE  -retry_clear_loop  ; $E379
$E37F     M_immnn:1 C0 28    CPY  #$28  ; dec40
$E381        M_rr:1 B0 04    BCS  +cleared_2nd_missile_line  ; $E387  ; branch if y >= 40 (upon clearing 2nd line of missiles?)
$E383     M_immnn:1 A0 28    LDY  #$28  ; dec40
$E385        M_rr:1 D0 F0    BNE  -retry2  ; $E377
+cleared_2nd_missile_line:
$E387      M_impl:0 68       PLA  ; retrieve number of missiles for currently assessed player again
$E388        M_rr:1 F0 19    BEQ  +skip_due_to_no_missiles_left  ; $E3A3  ; branch if player has no more missiles
$E38A      M_impl:0 AA       TAX
$E38B      M_impl:0 CA       DEX  ; decrease number of player missiles by one
-loop_to_draw_prior_torpedo_in_group:
$E38C     M_immnn:1 A9 50    LDA  #$50  ; #$50 = start of torpedo char


$E38E     M_immnn:1 A0 04    LDY  #$04
$E390        M_nn:1 84 08    STY  var0  ; $08
$E392     M_nnnnX:2 BC 24 EE LDY  screen_offsets_for_each_missile,x  ; $EE24,X
-loop_to_draw_next_torpedo_char:
$E395      M_InnY:1 91 02    STA  (scr_ptr_lo),y   ; ($02),Y
$E397      M_impl:0 C8       INY
$E398      M_impl:0 18       CLC
$E399     M_immnn:1 69 01    ADC  #$01  ; increment to next torpedo char (e.g., #$50, #$51, #$52, #$53)
$E39B        M_nn:1 C6 08    DEC  var0  ; $08
$E39D        M_rr:1 D0 F6    BNE  -loop_to_draw_next_torpedo_char  ; $E395
$E39F      M_impl:0 CA       DEX  ; decrease x to point to prior torpedo in group (aiming to redraw it on screen next)
$E3A0        M_rr:1 10 EA    BPL  -loop_to_draw_prior_torpedo_in_group  ; $E38C
$E3A2      M_impl:0 60       RTS
+skip_due_to_no_missiles_left:
$E3A3     M_immnn:1 A2 16    LDX  #$16  ; dec22
$E3A5     M_immnn:1 A0 32    LDY  #$32  ; dec50
-loop_for_dex:
$E3A7     M_nnnnX:2 BD B7 E3 LDA  $E3B7,X
$E3AA      M_InnY:1 91 02    STA  ($02),Y
$E3AC      M_impl:0 88       DEY
$E3AD     M_immnn:1 C0 28    CPY  #$28  ; dec40
$E3AF        M_rr:1 D0 02    BNE  +skip_if_y_not_40  ; $E3B3
$E3B1     M_immnn:1 A0 0C    LDY  #$0C  ; dec12
+skip_if_y_not_40:
$E3B3      M_impl:0 CA       DEX
$E3B4        M_rr:1 10 F1    BPL  -loop_for_dex  ; $E3A7
$E3B6      M_impl:0 60       RTS


 :000E3B7 3A 2F 33 2B 26 3A 35 26  32 35 27 2A 42 49 26 39  | :/3+&:5&25'*BI&9
           T  I  M  E     T  O      L  O  A  D  :  3     S
 :000E3C7 2B 29 35 34 2A 39 41                               | +)54*9
           E  C  O  N  D  S  .


redraw_player_submarines:
'-----------------------
$E3CE     M_immnn:1 A9 01    LDA  #$01
$E3D0        M_nn:1 85 23    STA  var5  ; $23
-big_loopback:
$E3D2        M_nn:1 A6 23    LDX  var5  ; $23
$E3D4      M_impl:0 8A       TXA
$E3D5      M_impl:0 18       CLC
$E3D6     M_immnn:1 69 15    ADC  #$15  ; dec21  ; this is row containing either:
                                                 ;    player1 sub (row21) - yellow
                                                 ; or player2 sub (row22) - light brown
$E3D8        M_nn:1 85 14    STA  txt_y_pos  ; $14
$E3DA     M_immnn:1 A9 00    LDA  #$00
$E3DC        M_nn:1 85 13    STA  txt_x_pos  ; $13
$E3DE      M_nnnn:2 20 C0 E6 JSR  adjust_scr_and_clr_ptr_locations  ; $E6C0
$E3E1        M_nn:1 A4 16    LDY  var4  ; $16
$E3E3        M_rr:1 D0 20    BNE  +branch_ahead1  ; $E405
$E3E5       M_nnX:1 B5 35    LDA  arrayBB,x  ; $35,X
$E3E7        M_nn:1 85 09    STA  var0-1  ; $09
$E3E9       M_nnX:1 D5 37    CMP  arrayE,x  ; $37,X
$E3EB        M_rr:1 D0 0C    BNE  +branch_ahead2  ; $E3F9
-retry_if_>=147:
$E3ED      M_nnnn:2 20 93 E8 JSR  dunno_stuff  ; $E893
$E3F0     M_immnn:1 C9 93    CMP  #$93  ; dec147
$E3F2        M_rr:1 B0 F9    BCS  -retry_if_>=147  ; $E3ED ; branch if >= 147
$E3F4       M_nnX:1 95 37    STA  arrayE,x  ; $37,X
$E3F6      M_nnnn:2 4C 00 E4 JMP  +jump_ahead  ; $E400
+branch_ahead2:
$E3F9        M_rr:1 B0 03    BCS  +skip_to_dec  ; $E3FE
$E3FB        M_nn:1 E6 09    INC  var0-1  ; $09
$E3FD      M_nnnn:2 2C C6 09 BIT  $09C6
  +skip_to_dec:
  $E3FE        M_nn:1 C6 09    DEC  var0-1 ; $09
+jump_ahead:
$E400        M_nn:1 A5 09    LDA  var0-1  ; $09
$E402      M_nnnn:2 4C 0C E4 JMP  +jump_ahead2  ; $E40C
+branch_ahead1:
$E405        M_nn:1 A5 23    LDA  var5  ; $23
$E407      M_nnnn:2 20 F0 F0 JSR  read_paddle_position  ; $F0F0
$E40A        M_nn:1 85 09    STA  var0-1  ; $09
+jump_ahead2:
$E40C        M_nn:1 A6 23    LDX  var5  ; $23
$E40E       M_nnX:1 B5 35    LDA  arrayBB,x  ; $35,X  ; some player1/2 detail (maybe player submarine x-pos x 4)
$E410         M_A:0 4A       LSR
$E411         M_A:0 4A       LSR
$E412      M_impl:0 A8       TAY
$E413     M_immnn:1 A2 05    LDX  #$05
$E415     M_immnn:1 A9 26    LDA  #$26  ; ' ' space char
-loop1:
$E417      M_InnY:1 91 02    STA  ($02),Y  ; wipe away existing player submarine chars with spaces (submarine is 5 chars wide)


$E419      M_impl:0 C8       INY
$E41A      M_impl:0 CA       DEX
$E41B        M_rr:1 D0 FA    BNE  -loop1  ; $E417
$E41D        M_nn:1 A5 09    LDA  var0-1  ; $09
$E41F     M_immnn:1 29 03    AND  #$03
$E421      M_impl:0 AA       TAX
$E422     M_nnnnX:2 BC E8 EE LDY  scr_row_lsb,x  ; $EEE8,X
$E425        M_nn:1 A5 23    LDA  var5  ; $23
$E427        M_rr:1 D0 03    BNE  +skip_more  ; $E42C
$E429     M_immnn:1 A2 00    LDX  #$00  ; row0
$E42B      M_nnnn:2 2C A2 28 BIT  $28A2
  +skip_more:
  $E42C     M_immnn:1 A2 28    LDX  #$28  ; dec40  ; row1
$E42E     M_immnn:1 A9 28    LDA  #$28  ; dec40
$E430        M_nn:1 85 08    STA  var0  ; $08
-loopy:
$E432     M_nnnnY:2 B9 48 EE LDA  some_screen_row_related_data,y  ; $EE48,Y
$E435     M_nnnnX:2 9D A8 02 STA  arrayF,x  ; $02A8,X
$E438      M_impl:0 E8       INX
$E439      M_impl:0 C8       INY
$E43A        M_nn:1 C6 08    DEC  var0  ; $08
$E43C        M_rr:1 D0 F4    BNE  -loopy ; $E432
$E43E        M_nn:1 A6 23    LDX  var5  ; $23
$E440        M_nn:1 A5 09    LDA  var0-1  ; $09
$E442       M_nnX:1 95 35    STA  arrayBB,x  ; $35,X  ; some player1/2 detail
$E444         M_A:0 4A       LSR
$E445         M_A:0 4A       LSR
$E446      M_impl:0 A8       TAY
$E447     M_nnnnX:2 BD 5D E4 LDA  sub_start_chars,x  ; $E45D,X  ; where x=0 is player1, x=1 is player2
$E44A     M_immnn:1 A2 05    LDX  #$05  ; player submarine sprite consists of 5 chars
-loopy2:
$E44C      M_InnY:1 91 02    STA  ($02),Y
$E44E      M_impl:0 18       CLC
$E44F     M_immnn:1 69 01    ADC  #$01
$E451      M_impl:0 C8       INY
$E452      M_impl:0 CA       DEX
$E453        M_rr:1 D0 F7    BNE  -loopy2  ; $E44C
$E455        M_nn:1 C6 23    DEC  var5  ; $23
$E457        M_rr:1 30 03    BMI  +skip_to_end  ; $E45C
$E459      M_nnnn:2 4C D2 E3 JMP  -big_loopback  ; $E3D2
+skip_to_end:
$E45C      M_impl:0 60       RTS


sub_start_chars:
 :000E45D 55 5A                                             | UZ

    55 = start char of 1st variation of submarine chars (maybe intended for player1)
    5A = start char of 2nd variation of submarine chars (though both variations look quite similar)
            (maybe intended for player2, possibly to give it a unique look?)


bullet_redraw_and_ship_assessment:
'--------------------------------
$E45F     M_immnn:1 A9 07    LDA  #$07  ; iterator over all the current ships (7 counts down to 0 on each loopback)
$E461        M_nn:1 85 23    STA  var5  ; $23
-jumbo_loopback:
$E463        M_nn:1 A6 23    LDX  var5  ; $23
$E465       M_nnX:1 B5 75    LDA  array10,x  ; $75,X  ; y-position of all ships?
$E467        M_rr:1 D0 03    BNE  +skip1  ; $E46C
$E469      M_nnnn:2 4C 2E E5 JMP  +jump_to_near_end  ; $E52E
+skip1:
$E46C      M_impl:0 48       PHA
$E46D         M_A:0 4A       LSR
$E46E         M_A:0 4A       LSR
$E46F         M_A:0 4A       LSR
$E470         M_A:0 4A       LSR  ; divide by 16
$E471      M_impl:0 A8       TAY
$E472      M_impl:0 68       PLA
$E473      M_impl:0 38       SEC
$E474     M_nnnnY:2 F9 C0 EF SBC  some_kooky_table,y  ; $EFC0,Y  ; (the table has values ranging from #$01 to #$03)
$E477        M_nn:1 85 08    STA  var0  ; $08
$E479      M_impl:0 8A       TXA  ; index to the current ship being assessed in loop
$E47A         M_A:0 0A       ASL
$E47B         M_A:0 0A       ASL  ; multiply by 4  ; so now ship0 = 0, ship1 = 4, ship2 = 8, ... ship7 = 28
$E47C        M_nn:1 85 0F    STA  var0-7  ; $0F
$E47E         M_A:0 0A       ASL
$E47F         M_A:0 0A       ASL
$E480         M_A:0 0A       ASL  ; multiply by 8  ; so now ship0 = 0, ship1 = 32, ship2 = 64, ... ship7 = 224
$E481        M_nn:1 85 10    STA  var0-8  ; $10
$E483     M_nnnnX:2 BD AC EF LDA  some_colour_chooser_table,x  ; $EFAC,X  ; a choice between yellow or light brown over idx0 to 7
$E486        M_nn:1 85 2E    STA  whatis6  ; $2E
$E488     M_immnn:1 A0 1F    LDY  #$1F  ; dec31
$E48A     M_immnn:1 A9 00    LDA  #$00
-loopback2:
$E48C     M_nnnnY:2 99 85 00 STA  array14,y  ; $0085,Y  ; reset entire array14[32] to zeroes
$E48F      M_impl:0 88       DEY
$E490        M_rr:1 10 FA    BPL  -loopback2  ; $E48C
$E492        M_nn:1 A5 08    LDA  var0  ; $08  ; y-pos of current ship minus some_kooky_table value
$E494         M_A:0 4A       LSR
$E495         M_A:0 4A       LSR
$E496         M_A:0 4A       LSR
$E497         M_A:0 4A       LSR  ; divide by 16
$E498      M_impl:0 A8       TAY
$E499     M_nnnnY:2 B9 B4 EF LDA  another_kooky_table,y  ; $EFB4,Y  ; has values like #$00, #$40 and #$80 (over index0 to 11)
$E49C        M_nn:1 85 09    STA  var0-1  ; $09
$E49E       M_nnX:1 B5 6D    LDA  array9,x  ; $6D,X  ; x-position of all ships
$E4A0     M_immnn:1 29 03    AND  #$03
$E4A2         M_A:0 0A       ASL
$E4A3         M_A:0 0A       ASL
$E4A4         M_A:0 0A       ASL
$E4A5         M_A:0 0A       ASL ; multiply by 16
$E4A6        M_nn:1 05 09    ORA  var0-1  ; $09  ; could be value of either #$00 or #$40 or #$80
$E4A8      M_impl:0 A8       TAY  ; used as index in kooky2_table later
$E4A9        M_nn:1 A5 08    LDA  var0  ; $08
$E4AB     M_immnn:1 29 07    AND  #$07
$E4AD      M_impl:0 AA       TAX
$E4AE     M_immnn:1 A9 08    LDA  #$08
$E4B0        M_nn:1 85 0E    STA  var0-6  ; $0E
-loopback1:
$E4B2     M_nnnnY:2 B9 EC EE LDA  kooky2_table,y  ; $EEEC,Y  ; y-range = 0 to 7  ; values of either #$00, #$E0 or #$40
$E4B5       M_nnX:1 95 85    STA  array14,x  ; $85,X
$E4B7     M_nnnnY:2 B9 F4 EE LDA  kooky3_table,y  ; $EEF4,Y  ; y-range = 0 to 7 (all values in table are #$00)
$E4BA       M_nnX:1 95 95    STA  array14+16,x  ; $95,X
$E4BC      M_impl:0 E8       INX
$E4BD      M_impl:0 C8       INY
$E4BE        M_nn:1 C6 0E    DEC  var0-6  ; $0E
$E4C0        M_rr:1 D0 F0    BNE  -loopback1  ; $E4B2
$E4C2        M_nn:1 A6 23    LDX  var5  ; $23  ; ought to be an index from 0 to 7
$E4C4       M_nnX:1 B5 6D    LDA  array9,x  ; $6D,X
$E4C6        M_nn:1 85 11    STA  var1  ; $11  ; x-pos of current ship?
$E4C8       M_nnX:1 B5 75    LDA  array10,x  ; $75,X
$E4CA        M_nn:1 85 12    STA  var2  ; $12  ; y-pos of current ship?
$E4CC      M_nnnn:2 20 B1 E6 JSR  set_scr_and_clr_ptr_locations_based_on_ship_xy_pos  ; $E6B1
$E4CF     M_immnn:1 A2 03    LDX  #$03
-loopback3:
$E4D1     M_nnnnX:2 BC 28 EE LDY  kooky_screen_locations,x  ; $EE28,X
$E4D4      M_InnY:1 B1 02    LDA  (scr_ptr_lo),y  ; ($02),Y  ; read the char at this screen location
$E4D6     M_immnn:1 C9 60    CMP  #$60  ; first bullet char in group

$E4D8        M_rr:1 90 04    BCC  +less_than_range_of_bullet_chars  ; $E4DE
$E4DA     M_immnn:1 A9 26    LDA  #$26  ; ' ' space char
$E4DC      M_InnY:1 91 02    STA  (scr_ptr_lo),y  ; ($02),Y  ; draw ' ' space char over prior bullet
+less_than_range_of_bullet_chars:
$E4DE      M_impl:0 CA       DEX
$E4DF        M_rr:1 10 F0    BPL  -loopback3  ; $E4D1
$E4E1        M_nn:1 A6 23    LDX  var5  ; $23
$E4E3        M_nn:1 A5 08    LDA  var0  ; $08
$E4E5     M_immnn:1 C9 10    CMP  #$10  ; dec16
$E4E7        M_rr:1 90 3F    BCC  +branch_near_end  ; $E528  ; branch if less than 16
$E4E9       M_nnX:1 B4 7D    LDY  array12,x  ; $7D,X
$E4EB        M_rr:1 D0 3B    BNE  +branch_near_end  ; $E528
$E4ED       M_nnX:1 95 75    STA  array10,x  ; $75,X  ; y-pos of all ships?
$E4EF        M_nn:1 85 12    STA  var2  ; $12  ; y-pos of current ship
$E4F1      M_nnnn:2 20 B1 E6 JSR  set_scr_and_clr_ptr_locations_based_on_ship_xy_pos  ; $E6B1
$E4F4        M_nn:1 A4 10    LDY  var0-8  ; $10
$E4F6     M_immnn:1 A2 00    LDX  #$00
-loopback4:
$E4F8       M_nnX:1 B5 85    LDA  array14,x  ; $85,X
$E4FA     M_nnnnY:2 99 00 03 STA  arrayG,y  ; $0300,Y
$E4FD      M_impl:0 C8       INY
$E4FE      M_impl:0 E8       INX
$E4FF     M_immnn:1 E0 20    CPX  #$20  ; 32
$E501        M_rr:1 D0 F5    BNE  -loopback4  ; $E4F8
$E503        M_nn:1 A5 0F    LDA  var0-7  ; $0F
$E505      M_impl:0 18       CLC
$E506     M_immnn:1 69 63    ADC  #$63  ; dec99
$E508        M_nn:1 85 09    STA  var0-1  ; $09  ; could it relate to current paddle position?
$E50A     M_immnn:1 A2 03    LDX  #$03
-big_loop1:
$E50C     M_nnnnX:2 BC 28 EE LDY  kooky_screen_locations,x  ; $EE28,X
$E50F      M_InnY:1 B1 02    LDA  (scr_ptr_lo),y  ; ($02),Y
$E511     M_immnn:1 C9 26    CMP  #$26  ; is it a ' ' space char?
$E513        M_rr:1 F0 04    BEQ  +branch_if_space_char  ; $E519
$E515     M_immnn:1 C9 60    CMP  #$60  ; #$60 = first shot char in group

$E517        M_rr:1 90 08    BCC  +branch_if_less_than_shot_char  ; $E521
+branch_if_space_char:
$E519        M_nn:1 A5 09    LDA  var0-1  ; $09
$E51B      M_InnY:1 91 02    STA  (scr_ptr_lo),y  ; ($02),Y
$E51D        M_nn:1 A5 2E    LDA  whatis6  ; $2E  ; some colour choice between yellow or light-brown
$E51F      M_InnY:1 91 04    STA  (clr_ptr_lo),y  ; ($04),Y
+branch_if_less_than_shot_char:
$E521        M_nn:1 C6 09    DEC  var0-1  ; $09
$E523      M_impl:0 CA       DEX
$E524        M_rr:1 10 E6    BPL  -big_loop1  ; $E50C
$E526        M_rr:1 30 06    BMI  +jump_to_near_end  ; $E52E
+branch_near_end:
$E528        M_nn:1 A6 23    LDX  var5  ; $23
$E52A     M_immnn:1 A9 00    LDA  #$00
$E52C       M_nnX:1 95 75    STA  array10,x  ; $75,X  ; y-pos of all ships
+jump_to_near_end:
$E52E        M_nn:1 C6 23    DEC  var5  ; $23
$E530        M_rr:1 30 03    BMI  +skip_to_end  ; $E535
$E532      M_nnnn:2 4C 63 E4 JMP  -jumbo_loopback  ; $E463
+skip_to_end:
$E535      M_impl:0 60       RTS


paddle_and_function_key_reading_routine:
'--------------------------------------
$E536     M_immnn:1 A9 00    LDA  #$00
$E538      M_nnnn:2 20 83 E7 JSR  read_paddle_fire_button  ; $E783
$E53B      M_impl:0 AA       TAX
$E53C        M_rr:1 D0 0D    BNE  paddle_fire_or_F1_pressed  ; $E54B  ; jump if paddle fire pressed (A = FF)
$E53E     M_immnn:1 A9 FE    LDA  #$FE
$E540      M_nnnn:2 8D 00 DC STA  $DC00
$E543      M_nnnn:2 AD 01 DC LDA  $DC01
$E546      M_impl:0 AA       TAX
$E547     M_immnn:1 29 10    AND  #$10  ; Check if F1 is pressed
$E549        M_rr:1 D0 04    BNE  no_paddle_fire_or_F1  ; $E54F ; Jump if not pressed
paddle_fire_or_F1_pressed:
$E54B     M_immnn:1 A9 01    LDA  #$01
$E54D        M_rr:1 D0 13    BNE  finish_off_routine  ; $E562  ; will always jump (as A is non-zero)
no_paddle_fire_or_F1:
$E54F      M_impl:0 8A       TXA
$E550     M_immnn:1 29 20    AND  #$20  ; Check if F3 is pressed
$E552        M_rr:1 D0 04    BNE  no_F3_pressed  ; $E558  ; Jump if not pressed
$E554     M_immnn:1 A9 03    LDA  #$03
$E556        M_rr:1 D0 0A    BNE  finish_off_routine  ; $E562
no_F3_pressed:
$E558      M_impl:0 8A       TXA
$E559     M_immnn:1 29 40    AND  #$40  ; Check if F5 is pressed
$E55B        M_rr:1 D0 03    BNE  $E560  ; Jump if not pressed
$E55D     M_immnn:1 A9 05    LDA  #$05
$E55F      M_nnnn:2 2C A9 00 BIT  $00A9
  $E560     M_immnn:1 A9 00    LDA  #$00
finish_off_routine:
$E562     M_immnn:1 A2 7F    LDX  #$7F
$E564      M_nnnn:2 8E 00 DC STX  $DC00
$E567      M_impl:0 60       RTS
                                      ; If F1 or paddle-fire was pressed, A = 1
                                      ; If F3 was pressed, A = 3
                                      ; If F5 was pressed, A = 5
                                      ; else A = 0


parent_routine_that_does_key_paddle_input:
'----------------------------------------
$E568      M_nnnn:2 20 59 E7 JSR  timer_loop  ; $E759
$E56B      M_nnnn:2 20 36 E5 JSR  paddle_and_function_key_reading_routine  ; $E536
$E56E      M_impl:0 AA       TAX
$E56F        M_rr:1 D0 F7    BNE  parent_routine_that_does_key_paddle_input  ; $E568
                             ; jump if any paddle-fire or func-key press (perhaps waiting for prior press to unpress)
$E571      M_nnnn:2 20 59 E7 JSR  timer_loop  ; $E759
$E574        M_nn:1 E6 1B    INC  $1B
$E576      M_nnnn:2 20 36 E5 JSR  paddle_and_function_key_reading_routine  ; $E536
$E579      M_impl:0 AA       TAX
$E57A        M_rr:1 F0 F5    BEQ  $E571  ; jump if no paddle-fire or func-key press
$E57C      M_impl:0 60       RTS


prepare_game_screen:
'------------------
$E57D      M_nnnn:2 20 99 E7 JSR  init_game_screen  ; $E799
$E580     M_immnn:1 A2 27    LDX  #$27  ; (39)
-loop1:
$E582     M_immnn:1 A9 07    LDA  #$07
$E584     M_nnnnX:2 9D 48 DB STA  $DB48,X  (row 21 colour ram all set to 7 / yellow) - player 1 submarine row
$E587     M_immnn:1 A9 08    LDA  #$08     (row 22 colour ram all set to 8 / light brown?) - player 2 submarine row
$E589     M_nnnnX:2 9D 70 DB STA  $DB70,X
$E58C     M_immnn:1 A9 00    LDA  #$00
$E58E     M_nnnnX:2 9D 00 D8 STA  $D800,X  (row 0 colour ram all set to 0 / black)
$E591     M_nnnnX:2 9D 28 D8 STA  $D828,X  (row 1 colour ram all set to 0 / black)
$E594      M_impl:0 CA       DEX
$E595        M_rr:1 10 EB    BPL  -loop1  ; $E582
$E597     M_immnn:1 A2 0D    LDX  #$0D    ; (13)
-loop2:
$E599     M_immnn:1 A9 07    LDA  #$07      ; 7 = yellow
$E59B     M_nnnnX:2 9D 99 DB STA  $DB99,X   ; (row 23 - from col 1 to 8)
$E59E     M_nnnnX:2 9D C1 DB STA  $DBC1,X   ; (row 24 - from col 1 to 8)
$E5A1     M_immnn:1 A9 08    LDA  #$08      ; 8 = light brown
$E5A3     M_nnnnX:2 9D B2 DB STA  $DBB2,X   ; (row 23 - from col 26 to 33)
$E5A6     M_nnnnX:2 9D DA DB STA  $DBDA,X   ; (row 24 - from col 26 to 33)
$E5A9      M_impl:0 CA       DEX
$E5AA        M_rr:1 10 ED    BPL  -loop2  ; $E599
$E5AC     M_immnn:1 A9 17    LDA  #$17  ; dec23
$E5AE        M_nn:1 85 14    STA  var2  ; $14  (curr. ship y-pos?)
$E5B0      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839

 :000E5B3 3A 2F 33 2B 26 32 2B 2C  3A 00 20 73 E8 A2 00 20  | :/3+&2+,:. s...
           T  I  M  E     L  E  F   T

$E5BD      M_nnnn:2 20 73 E8 JSR  $E873
$E5C0     M_immnn:1 A2 00    LDX  #$00
$E5C2      M_nnnn:2 20 5F E3 JSR  $E35F
$E5C5     M_immnn:1 A2 01    LDX  #$01
$E5C7      M_nnnn:2 20 5F E3 JSR  $E35F
$E5CA      M_nnnn:2 4C F3 E8 JMP  $E8F3
$E5CD      M_nnnn:2 20 F5 E8 JSR  $E8F5
$E5D0      M_nnnn:2 20 99 E7 JSR  $E799
$E5D3     M_immnn:1 A2 4F    LDX  #$4F
$E5D5     M_immnn:1 A9 01    LDA  #$01
$E5D7     M_nnnnX:2 9D 00 D8 STA  $D800,X
$E5DA      M_impl:0 CA       DEX
$E5DB        M_rr:1 10 FA    BPL  $E5D7
$E5DD     M_immnn:1 A9 18    LDA  #$18
$E5DF        M_nn:1 85 14    STA  $14
$E5E1      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839



-loop1:
$E635     M_immnn:1 A0 00    LDY  #$00
$E637      M_InnY:1 B1 06    LDA  (ret_ptr_lo),y  ; ($06),Y  ; pointer to inline-text-string
$E639        M_rr:1 F0 12    BEQ  +skip1 ; $E64D  ; found string null-terminator? then branch
$E63B      M_nnnn:2 4C 6A E6 JMP  +big_jump  ; $E66A
write_line_routine:
$E63E      M_nnnn:2 20 EC E7 JSR  draw_text_to_screen  ; $E7EC
$E641        M_nn:1 E6 14    INC  var2  ; $14
$E643        M_nn:1 E6 14    INC  var2  ; $14
$E645        M_nn:1 E6 06    INC  $06
$E647        M_rr:1 D0 EC    BNE  -loop1  ; $E635
$E649        M_nn:1 E6 07    INC  $07
$E64B        M_rr:1 D0 E8    BNE  -loop1  ; $E635
+skip1:
$E64D     M_immnn:1 A9 02    LDA  #$02
$E64F        M_nn:1 85 08    STA  $08
$E651     M_immnn:1 A0 78    LDY  #$78
$E653      M_nnnn:2 20 36 E5 JSR  $E536
$E656     M_immnn:1 C9 01    CMP  #$01
$E658        M_rr:1 F0 0D    BEQ  $E667
$E65A      M_nnnn:2 20 59 E7 JSR  $E759
$E65D      M_impl:0 88       DEY
$E65E        M_rr:1 D0 F3    BNE  $E653
$E660        M_nn:1 C6 08    DEC  $08
$E662        M_rr:1 D0 ED    BNE  $E651
$E664     M_immnn:1 A9 00    LDA  #$00
$E666      M_nnnn:2 2C A9 FF BIT  $FFA9
$E669      M_impl:0 60       RTS

+big_jump:
$E66A     M_immnn:1 A2 02    LDX  #$02
$E66C     M_immnn:1 A0 F4    LDY  #$F4
$E66E      M_impl:0 98       TYA
$E66F     M_nnnnX:2 9D F8 07 STA  $07F8,X
$E672      M_impl:0 88       DEY
$E673     M_nnnnX:2 BD AE E6 LDA  $E6AE,X
$E676     M_nnnnX:2 9D 27 D0 STA  $D027,X
$E679      M_impl:0 CA       DEX
$E67A        M_rr:1 10 F2    BPL  $E66E
$E67C     M_immnn:1 A9 1D    LDA  #$1D
$E67E        M_nn:1 85 08    STA  $08

loopy1:
$E680     M_immnn:1 A2 04    LDX  #$04
loopy2:
$E682     M_nnnnX:2 BD 00 D0 LDA  $D000,X  ; $d004/$d002/$d000 = sprite2/1/0 x-pos, 
$E685     M_immnn:1 C9 38    CMP  #$38
$E687        M_rr:1 F0 03    BEQ  skip_ship_move  ; $E68C
$E689     M_nnnnX:2 DE 00 D0 DEC  $D000,X
skip_ship_move:
$E68C      M_impl:0 CA       DEX
$E68D      M_impl:0 CA       DEX
$E68E        M_rr:1 10 F2    BPL  loopy2  ; $E682
$E690      M_nnnn:2 20 59 E7 JSR  timer_loop  ; $E759
$E693      M_nnnn:2 20 59 E7 JSR  timer_loop  ; $E759
$E696      M_nnnn:2 20 36 E5 JSR  $E536
$E699     M_immnn:1 C9 01    CMP  #$01
$E69B        M_rr:1 F0 CA    BEQ  $E667
$E69D        M_nn:1 C6 08    DEC  $08
$E69F        M_rr:1 D0 DF    BNE  loopy1  ; $E680
$E6A1      M_nnnn:2 4C 3E E6 JMP  write_line_routine  ; $E63E


set_scr_and_clr_ptr_locations_based_on_ship_xy_pos:
'-------------------------------------------------
$E6B1      M_impl:0 48       PHA
$E6B2        M_nn:1 A5 11    LDA  var1  ; $11  ; x-pos of current ship
$E6B4         M_A:0 4A       LSR
$E6B5         M_A:0 4A       LSR  ; divide by 4
$E6B6        M_nn:1 85 13    STA  txt_x_pos  ; $13
$E6B8        M_nn:1 A5 12    LDA  var2  ; $12  ; y-pos of current ship
$E6BA         M_A:0 4A       LSR
$E6BB         M_A:0 4A       LSR
$E6BC         M_A:0 4A       LSR  ; divide by 8
$E6BD        M_nn:1 85 14    STA  txt_y_pos  ; $14
$E6BF        M_nn:1 24 48    BIT  array1+3  ; $48

adjust_scr_and_clr_ptr_locations:
'-------------------------------
  $E6C0      M_impl:0 48       PHA  ; preserve A on stack
  ; (if falling through from prior function, the BIT will skip this line)
$E6C1      M_impl:0 8A       TXA
$E6C2      M_impl:0 48       PHA  ; preserve X on stack
$E6C3        M_nn:1 A6 14    LDX  $14
$E6C5     M_nnnnX:2 BD DC ED LDA  scr_ptr_low,X  ; $EDDC,X
$E6C8      M_impl:0 18       CLC
$E6C9        M_nn:1 65 13    ADC  $13
$E6CB        M_nn:1 85 02    STA  scr_ptr_lo  ; $02
$E6CD        M_nn:1 85 04    STA  clr_ptr_lo  ; $04
$E6CF     M_immnn:1 A0 00    LDY  #$00
$E6D1     M_nnnnX:2 BD F5 ED LDA  scr_row_ptr_hi,x  ; $EDF5,X
$E6D4     M_immnn:1 69 00    ADC  #$00
$E6D6        M_nn:1 85 03    STA  scr_ptr_hi  ; $03
$E6D8     M_immnn:1 69 D4    ADC  #$D4
$E6DA        M_nn:1 85 05    STA  clr_ptr_hi  ; $05
$E6DC      M_impl:0 68       PLA
$E6DD      M_impl:0 AA       TAX  ; restore X from stack
$E6DE      M_impl:0 68       PLA  ; restore A from stack
$E6DF      M_impl:0 60       RTS

add_points_to_score_then_update_high_score_and_reprint:
'-----------------------------------------------------
$E6E0        M_nn:1 A4 16    LDY  var4  ; $16  ; was set to #$ff in start_game
$E6E2        M_rr:1 D0 01    BNE  $E6E5
$E6E4      M_impl:0 60       RTS
$E6E5      M_impl:0 F8       SED
$E6E6      M_impl:0 18       CLC
$E6E7       M_nnX:1 75 1D    ADC  p1_score_lo,x  ; $1D,X
$E6E9       M_nnX:1 95 1D    STA  p1_score_lo,x  ; $1D,X
$E6EB       M_nnX:1 B5 1F    LDA  p1_score_hi,x  ; $1F,X
$E6ED     M_immnn:1 69 00    ADC  #$00
$E6EF       M_nnX:1 95 1F    STA  p1_score_hi,x ; $1F,X
$E6F1        M_nn:1 A5 21    LDA  high_score_lo  ; $21
$E6F3      M_impl:0 38       SEC
$E6F4       M_nnX:1 F5 1D    SBC  p1_score_lo,x  ; $1D,X
$E6F6        M_nn:1 A5 22    LDA  high_score_hi  ; $22
$E6F8       M_nnX:1 F5 1F    SBC  p1_score_hi,x  ; $1F,X
$E6FA        M_rr:1 B0 08    BCS  +skip_set_high_score  ; $E704  ; branch if we didn't beat high score
set_high_score:
$E6FC       M_nnX:1 B5 1D    LDA  p1_score_lo,x  ; $1D,X
$E6FE        M_nn:1 85 21    STA  high_score_lo  ; $21
$E700       M_nnX:1 B5 1F    LDA  p1_score_hi,x  ; $1F,X
$E702        M_nn:1 85 22    STA  high_score_hi  ; $22
+skip_set_high_score:
$E704      M_impl:0 D8       CLD


print_all_scores:
'---------------
$E705     M_immnn:1 A9 01    LDA  #$01
$E707        M_nn:1 85 14    STA  txt_y_pos  ; $14
$E709        M_nn:1 85 13    STA  txt_x_pos  ; $13
$E70B      M_nnnn:2 20 C0 E6 JSR  adjust_scr_and_clr_ptr_locations  ; $E6C0

print_player1_score:
$E70E     M_immnn:1 A0 02    LDY  #$02  ; the x-location to start drawing digits from
$E710        M_nn:1 A5 1D    LDA  p1_score_lo  ; var5  ; $1D
$E712        M_nn:1 A6 1F    LDX  p1_score_hi  ; var7  ; $1F
$E714      M_nnnn:2 20 26 E7 JSR  print_two_digits_in_X_and_two_digits_in_A_and_two_trailing_zeroes  ; $E726

print_high_score:
$E717     M_immnn:1 A0 10    LDY  #$10
$E719        M_nn:1 A5 21    LDA  high_score_lo  ; var8-1  ; $21
$E71B        M_nn:1 A6 22    LDX  high_score_hi  ; var8-2  ; $22
$E71D      M_nnnn:2 20 26 E7 JSR  print_two_digits_in_X_and_two_digits_in_A_and_two_trailing_zeroes  ; $E726

print_player2_score:
$E720     M_immnn:1 A0 1E    LDY  #$1E  ; (30) the x-location to start drawing digits from
$E722        M_nn:1 A5 1E    LDA  p2_score_lo  ; var6  ; $1E
$E724        M_nn:1 A6 20    LDX  p2_score_hi  ; var8  ; $20


print_two_digits_in_X_and_two_digits_in_A_and_two_trailing_zeroes:
'----------------------------------------------------------------
$E726      M_nnnn:2 20 31 E7 JSR  print_two_digits_in_X_and_two_digits_in_A  ; $E731
$E729     M_immnn:1 A9 46    LDA  #$46  ; #$46 = '0' char
$E72B      M_InnY:1 91 02    STA  ($02),Y
$E72D      M_impl:0 C8       INY
$E72E      M_InnY:1 91 02    STA  ($02),Y  ; Is this to put two trailing '0' chars at the end of the score?
$E730      M_impl:0 60       RTS


print_two_digits_in_X_and_two_digits_in_A:
---------------------
$E731      M_impl:0 48       PHA
$E732     M_immnn:1 A9 00    LDA  #$00
$E734        M_nn:1 85 08    STA  var0  ; $08
$E736      M_impl:0 8A       TXA
$E737      M_nnnn:2 20 3B E7 JSR  print_two_digits_in_A  ; $E73B
$E73A      M_impl:0 68       PLA


print_two_digits_in_A:
---------------------
$E73B      M_impl:0 48       PHA
$E73C         M_A:0 4A       LSR
$E73D         M_A:0 4A       LSR
$E73E         M_A:0 4A       LSR
$E73F         M_A:0 4A       LSR
$E740      M_nnnn:2 20 46 E7 JSR  +inner_jsr  ; $E746  ; print digit in high nibble first
$E743      M_impl:0 68       PLA
print_lower_nibble_digit_in_A:
-----------------------------
$E744     M_immnn:1 29 0F    AND  #$0F  ; then print digit in lower nibble
+inner_jsr:
$E746        M_rr:1 D0 08    BNE  +skip1  ; $E750
$E748        M_nn:1 A6 08    LDX  var0  ; $08
$E74A        M_rr:1 D0 04    BNE  +skip1  ; $E750
$E74C     M_immnn:1 A9 26    LDA  #$26    ; #$26 = ' ' space char in char-map
$E74E        M_rr:1 D0 05    BNE  +skip2  ; $E755
+skip1:
$E750      M_impl:0 18       CLC
$E751     M_immnn:1 69 46    ADC  #$46  ; #$46 = '0' char in char-map  (so this could relate to printing score)
$E753        M_nn:1 E6 08    INC  $08
+skip2:
$E755      M_InnY:1 91 02    STA  ($02),Y
$E757      M_impl:0 C8       INY
$E758      M_impl:0 60       RTS


timer_loop:
'---------
$E759      M_nnnn:2 AD 0E DC LDA  $DC0E  ; CIA Control Register A - bit0 = start(1)/stop(0) timer
$E75C         M_A:0 4A       LSR
$E75D        M_rr:1 B0 FA    BCS  timer_loop  ;  $E759
$E75F      M_nnnn:2 EE 0E DC INC  $DC0E  ; after timer has stopped, restart it (turn bit0 back on)
$E762      M_impl:0 60       RTS


read_paddle_fire_button:
'----------------------
$E783      M_impl:0 AA       TAX  ; a = 0 always, so x = 0
$E784     M_immnn:1 A9 FF    LDA  #$FF
$E786      M_nnnn:2 8D 00 DC STA  $DC00  ; Data Port A - Write Keyboard Column Values for keyboard scan
                                         ; Setting to #$FF seems to disable the keyboard column scan, so that $DC01 will read its
                                         ; alternate bitfields (and not row values)
$E789      M_nnnn:2 AD 01 DC LDA  $DC01  ; Data Port B - Read Keyboard Row Values for keyboard scan
$E78C     M_nnnnX:2 3D 97 E7 AND  $E797,X  ; always pb E797 = #$04  (paddle fire button)
$E78F        M_rr:1 D0 03    BNE  $E794  ; if bit3 was 1 (i.e., paddle fire not pressed) then jump
$E791     M_immnn:1 A9 FF    LDA  #$FF   ; bit3 was 0, so set A = FF to indicate paddle fire was pressed
$E793      M_nnnn:2 2C A9 00 BIT  $00A9
  $E794     M_immnn:1 A9 00    LDA  #$00
$E796      M_impl:0 60       RTS  ; If paddle fire not pressed, return A = 0
                                  ; If paddle fire is pressed, A = FF

 :000E797 04 08   | ..     ; 04 is used by $E797 for paddle 1 fire test
                           ; 08 is used by $E797 for paddle 2 fire test


init_game_screen:
'---------------
$E799     M_immnn:1 A2 00    LDX  #$00
-loop1:
$E79B     M_immnn:1 A9 26    LDA  #$26  ; This is the space ' ' char in their charater map
$E79D     M_nnnnX:2 9D 00 04 STA  $0400,X  ; clear the screen memory with space ' ' chars
$E7A0     M_nnnnX:2 9D 00 05 STA  $0500,X
$E7A3     M_nnnnX:2 9D 00 06 STA  $0600,X
$E7A6     M_nnnnX:2 9D E8 06 STA  $06E8,X
$E7A9     M_immnn:1 A9 01    LDA  #$01
$E7AB     M_nnnnX:2 9D 00 D8 STA  $D800,X  ; set colour memory to all 1 (white) value
$E7AE     M_nnnnX:2 9D 00 D9 STA  $D900,X
$E7B1     M_nnnnX:2 9D 00 DA STA  $DA00,X
$E7B4     M_nnnnX:2 9D E8 DA STA  $DAE8,X
$E7B7      M_impl:0 CA       DEX
$E7B8        M_rr:1 D0 E1    BNE  -loop1  ; $E79B
$E7BA        M_nn:1 86 14    STX  $14
$E7BC      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839
 :000E7BF F8 26 26 36 32 27 3F 2B  38 26 47 26 26 26 26 26  | .&&62'?+8&G&&&&&
                    P  L  A  Y  E   R     1               
 :000E7CF 2E 2F 2D 2E 26 39 29 35  38 2B 26 26 26 26 26 36  | ./-.&9)58+&&&&&6
           H  I  G  H     S  C  O   R  E                 P
 :000E7DF 32 27 3F 2B 38 26 48 26  26 00 4C 05 E7 A9 00 85  | 2'?+8&H&&.L.....
           L  A  Y  E  R     2        
$E7E9      M_nnnn:2 4C 05 E7 JMP  print_all_scores  ; $E705


draw_text_to_screen:
'------------------
$E7EC     M_immnn:1 A9 00    LDA  #$00
$E7EE        M_nn:1 85 13    STA  $13
$E7F0      M_nnnn:2 20 C0 E6 JSR  adjust_scr_and_clr_ptr_locations  ; $E6C0
$E7F3     M_immnn:1 A9 01    LDA  #$01  ; The current colour to draw the text in (defaults to white)
$E7F5      M_impl:0 48       PHA        ; this var is pushed onto the stack
$E7F6     M_immnn:1 A0 00    LDY  #$00
$E7F8        M_nn:1 84 13    STY  $13
-loop1:
$E7FA      M_InnY:1 B1 06    LDA  (ret_ptr_lo),y  ; ($06),Y  ; ptr to inline text
$E7FC        M_rr:1 F0 09    BEQ  +end_of_string  ; $E807  ; if null-ptr / end-of-string, then branch
$E7FE     M_immnn:1 C9 F8    CMP  #$F8
$E800        M_rr:1 90 02    BCC  $E804
$E802        M_nn:1 E6 13    INC  $13
$E804      M_impl:0 C8       INY
$E805        M_rr:1 D0 F3    BNE  -loop1  ; $E7FA  ; branch until y increments back to zero (a max of 255 chars)
+end_of_string:
$E807      M_impl:0 88       DEY  ; Y ought to equal the length of the string
$E808      M_impl:0 98       TYA  ; A = Y = length of string
$E809      M_impl:0 38       SEC
$E80A        M_nn:1 E5 13    SBC  $13  ; A = length of string minus the count of special F8 chars
$E80C         M_A:0 4A       LSR       ; A = A / 2
$E80D        M_nn:1 85 13    STA  $13  ; Store half the length of the string in $13
$E80F     M_immnn:1 A9 13    LDA  #$13  ; (19, half the screen width)
$E811      M_impl:0 38       SEC
$E812        M_nn:1 E5 13    SBC  $13  ; A = (half screen width) - (half string width)
                                       ;   = the x-position to assure string is horizontally centred
$E814      M_impl:0 A8       TAY
draw_char_loop:
$E815     M_immnn:1 A2 00    LDX  #$00
$E817      M_InnX:1 A1 06    LDA  ($06,X)   ; pw 06 = $EFCD  (x=0, out: a = 35 = 'O')
$E819        M_rr:1 F0 1C    BEQ  found_null ; $E837     ; A = null terminator?
$E81B     M_immnn:1 C9 F8    CMP  #$F8
$E81D        M_rr:1 90 09    BCC  valid_char ; $E828   ; branch if A < #$f8
$E81F     M_immnn:1 29 07    AND  #$07  ; and with %0000 0111
$E821      M_impl:0 BA       TSX  ; X = stack pointer low
$E822      M_impl:0 E8       INX
$E823     M_nnnnX:2 9D 00 01 STA  $0100,X  ; A value of #$01 was pushed the stack earlier at $E7F3.
                                           ; This will reset this stack value to new value of the special string char and $07
$E826        M_rr:1 B0 07    BCS  +skip1  ; $E82F  ; I think this always jumps, due to prior CMP#$F8 being true?
valid_char:
$E828      M_InnY:1 91 02    STA  (scr_ptr_lo),y  ; ($02),Y  ; pw 02 = 0478 , y = 4  (draw A char onto the screen)
$E82A      M_impl:0 68       PLA
$E82B      M_impl:0 48       PHA  ; aah, the stack var is the current colour to draw the text in
$E82C      M_InnY:1 91 04    STA  (clr_ptr_lo),y  ; ($04),Y  ; pw 04 = d878
$E82E      M_impl:0 C8       INY
+skip1:
$E82F        M_nn:1 E6 06    INC  ret_ptr_lo  ; $06  ; pb 06 = CD
$E831        M_rr:1 D0 E2    BNE  draw_char_loop  ; $E815
$E833        M_nn:1 E6 07    INC  ret_ptr_hi  ; $07  ; pb 07 = EF
$E835        M_rr:1 D0 DE    BNE  draw_char_loop ; $E815

found_null:
$E837      M_impl:0 68       PLA  ; drop the stack var for current text colour
$E838      M_impl:0 60       RTS


draw_inline_text:
'---------------
$E839      M_impl:0 68       PLA
$E83A      M_impl:0 18       CLC
$E83B     M_immnn:1 69 01    ADC  #$01
$E83D        M_nn:1 85 06    STA  ret_ptr_lo  ; $06
$E83F      M_impl:0 68       PLA
$E840     M_immnn:1 69 00    ADC  #$00
$E842        M_nn:1 85 07    STA  ret_ptr_hi  ; $07   ; seems to be pulling the return from jsr address into pw $06
$E844      M_nnnn:2 20 EC E7 JSR  draw_text_to_screen  ; $E7EC

$E847        M_nn:1 A5 07    LDA  ret_ptr_hi  ; $07  ; push the modified return location back onto the stack
$E849      M_impl:0 48       PHA
$E84A        M_nn:1 A5 06    LDA  ret_ptr_lo  ; $06
$E84C      M_impl:0 48       PHA
$E84D      M_impl:0 60       RTS


print_remaining_game_time:
'------------------------
$E873     M_immnn:1 A9 12    LDA  #$12  ; (18)
$E875        M_nn:1 85 13    STA  txt_x_pos  ; $13
$E877     M_immnn:1 A9 18    LDA  #$18  ; (24)
$E879        M_nn:1 85 14    STA  txt_y_pos  ; $14
$E87B      M_nnnn:2 20 C0 E6 JSR  adjust_scr_and_clr_ptr_locations  ; $E6C0
$E87E     M_immnn:1 A0 00    LDY  #$00
$E880     M_immnn:1 A9 01    LDA  #$01
$E882        M_nn:1 85 08    STA  var0  ; $08
$E884        M_nn:1 A5 28    LDA  minutes_left  ; $28
$E886      M_nnnn:2 20 44 E7 JSR  print_lower_nibble_digit_in_A  ; $E744
$E889     M_immnn:1 A9 42    LDA  #$42  ; ':' char
$E88B      M_InnY:1 91 02    STA  (scr_ptr_lo),y  ; ($02),Y
$E88D      M_impl:0 C8       INY
$E88E        M_nn:1 A5 27    LDA  decimal_secs_in_minutes_left  ; $27
$E890      M_nnnn:2 4C 3B E7 JMP  print_two_digits_in_A  ; $E73B


dunno_stuff:
-----------
  ' perhaps this logic decides if the currently invisible/disabled ship should become visible?
$E893      M_impl:0 8A       TXA
$E894      M_impl:0 48       PHA
$E895     M_immnn:1 A2 0B    LDX  #$0B  ; dec11  ; loop over 10 times
-retry:
$E897        M_nn:1 06 1B    ASL  dunno1  ; $1B
$E899        M_nn:1 26 1C    ROL  dunno2  ; $1C
$E89B         M_A:0 2A       ROL
$E89C         M_A:0 2A       ROL
$E89D        M_nn:1 45 1B    EOR  dunno1  ; $1B
$E89F         M_A:0 2A       ROL
$E8A0        M_nn:1 45 1B    EOR  dunno1  ; $1B
$E8A2         M_A:0 4A       LSR
$E8A3         M_A:0 4A       LSR
$E8A4     M_immnn:1 49 FF    EOR  #$FF
$E8A6     M_immnn:1 29 01    AND  #$01
$E8A8        M_nn:1 05 1B    ORA  dunno1  ; $1B
$E8AA        M_nn:1 85 1B    STA  dunno1  ; $1B
$E8AC      M_impl:0 CA       DEX
$E8AD        M_rr:1 D0 E8    BNE  -retry  ; $E897  ; loop from 11 to 1
$E8AF      M_impl:0 68       PLA
$E8B0      M_impl:0 AA       TAX
$E8B1        M_nn:1 A5 1B    LDA  dunno1  ; $1B
$E8B3      M_impl:0 60       RTS


move_curr_ship_position:
-----------------------
' (ship/buoy index should be placed in A)
' NOTE: Could be a buoy too
$E8B4      M_impl:0 AA       TAX
$E8B5         M_A:0 0A       ASL  ; multiply by 2
$E8B6      M_impl:0 A8       TAY
$E8B7        M_nn:1 A5 11    LDA  var1  ; $11
$E8B9      M_impl:0 18       CLC
$E8BA     M_immnn:1 69 0C    ADC  #$0C  ; add 12
$E8BC         M_A:0 0A       ASL
$E8BD     M_nnnnY:2 99 00 D0 STA  $D000,Y  ; store in sprite x-pos of desired sprite
$E8C0        M_rr:1 B0 09    BCS  +skip1  ; $E8CB
$E8C2     M_nnnnX:2 BD 40 EE LDA  and_bitfields,x  ; $EE40,X
$E8C5      M_nnnn:2 2D 10 D0 AND  $D010  ; sprite 0-7 xpos msb  ; turn off sprite xpos msb
$E8C8      M_nnnn:2 4C D1 E8 JMP  +skip2  ; $E8D1
+skip1:
$E8CB     M_nnnnX:2 BD 38 EE LDA  or_bitfields  ; $EE38,X  ; turn on sprite xpos msb
$E8CE      M_nnnn:2 0D 10 D0 ORA  $D010
+skip2:
$E8D1      M_nnnn:2 8D 10 D0 STA  $D010  ; set sprite xpos msb to desired value (either on/off)
$E8D4        M_nn:1 A5 12    LDA  var2  ; $12
$E8D6      M_impl:0 18       CLC
$E8D7     M_immnn:1 69 32    ADC  #$32  ; dec50  ; adjust ship y-pos to absolute sprite coordinates
$E8D9     M_nnnnY:2 99 01 D0 STA  $D001,Y  ; set sprite ypos
$E8DC      M_impl:0 60       RTS


turn_on_sprite_A:
----------------
$E8DD      M_impl:0 AA       TAX
$E8DE     M_nnnnX:2 BD 38 EE LDA  or_bitfields,x  ; $EE38,X
$E8E1      M_nnnn:2 0D 15 D0 ORA  $D015
$E8E4      M_nnnn:2 8D 15 D0 STA  $D015  ; sprite display enable
$E8E7      M_impl:0 60       RTS


turn_off_sprite_A:
-----------------
$E8E8      M_impl:0 AA       TAX
$E8E9     M_nnnnX:2 BD 40 EE LDA  and_bitfields,x  ; $EE40,X
$E8EC      M_nnnn:2 2D 15 D0 AND  $D015
$E8EF      M_nnnn:2 8D 15 D0 STA  $D015  ; sprite display disable
$E8F2      M_impl:0 60       RTS


---------------------

init_sid:
--------
$E930     M_immnn:1 A2 18    LDX  #$18  ; (24)
$E932     M_nnnnX:2 BD DC EB LDA  sid_init_values,x  ; $EBDC,X
$E935     M_nnnnX:2 9D 00 D4 STA  $D400,X
$E938      M_impl:0 CA       DEX
$E939        M_rr:1 10 F7    BPL  $E932
$E93B      M_impl:0 60       RTS


v1_reset_and_gate_off:
---------------------
$E93C     M_immnn:1 A9 06    LDA  #$06
$E93E        M_nn:1 85 2A    STA  whatis2  ; $2A
$E940     M_immnn:1 A9 00    LDA  #$00
$E942      M_nnnn:2 8D 00 D4 STA  $D400  ; v1_freq_lo
$E945      M_nnnn:2 8D 01 D4 STA  $D401  ; v1_freq_hi
$E948     M_immnn:1 A9 50    LDA  #$50   ; %0101 0000
$E94A      M_nnnn:2 8D 06 D4 STA  $D406  ; v1_env_sus_rel
$E94D     M_immnn:1 A9 40    LDA  #$40   ; %0100 0000
$E94F      M_nnnn:2 8D 04 D4 STA  $D404  ; v1_ctrl_reg  (select pulse, gate off)
$E952      M_impl:0 60       RTS


play_fire_shoot_sound_on_v2:
'--------------------------
$E953     M_immnn:1 A9 03    LDA  #$03
$E955        M_nn:1 85 2B    STA  whatis3  ; $2B
$E957     M_immnn:1 A9 81    LDA  #$81  ; %1000 0001
$E959      M_nnnn:2 8D 0B D4 STA  $D40B  ; v2_ctrl_reg  (noise wave, gate on)
$E95C      M_impl:0 60       RTS


assess_sound_states:
-------------------
  ' assesses whether to turn off any player fire/shot or ship explosion sounds
  ' also assesses whether to switch v1 to play the beep-beep of the P.T. boat
$E967        M_nn:1 A5 2D    LDA  whatis5  ; $2D
$E969        M_rr:1 F0 03    BEQ  +skip1  ; $E96E
$E96B        M_nn:1 C6 2D    DEC  whatis5  ; $2D
$E96D      M_impl:0 60       RTS
+skip1:
$E96E     M_immnn:1 A9 03    LDA  #$03
$E970        M_nn:1 85 2D    STA  whatis5  ; $2D
$E972        M_nn:1 A5 2B    LDA  whatis3  ; $2B
$E974        M_rr:1 F0 09    BEQ  +skip2  ; $E97F
$E976        M_nn:1 C6 2B    DEC  whatis3  ; $2B
$E978        M_rr:1 D0 05    BNE  +skip3  ; $E97F
$E97A     M_immnn:1 A9 80    LDA  #$80  ; %1000 0000
$E97C      M_nnnn:2 8D 0B D4 STA  $D40B  ; v2_ctrl_reg  (noise wave, gate off)  ; turn off player fire/shoot sound?
+skip2:
$E97F        M_nn:1 A5 2C    LDA  whatis4  ; $2C
+skip3:
$E981        M_rr:1 F0 09    BEQ  +skip4  ; $E98C
$E983        M_nn:1 C6 2C    DEC  whatis4  ; $2C
$E985        M_rr:1 D0 05    BNE  +skip4  ; $E98C
$E987     M_immnn:1 A9 80    LDA  #$80  ; %1000 0000
$E989      M_nnnn:2 8D 12 D4 STA  $D412  ; v3_ctrl_reg  (noise wave, gate off)  ; turn off explosion sound?
+skip4:
$E98C     M_immnn:1 A2 03    LDX  #$03
-loop1:
$E98E       M_nnX:1 B5 39    LDA  array0,x  ; $39,X
$E990        M_rr:1 F0 08    BEQ  +skip5  ; $E99A
$E992        M_rr:1 30 06    BMI  +skip5  ; $E99A
$E994       M_nnX:1 B5 51    LDA  array3,x  ; $51,X  ; possibly index to the type of ship on screen
$E996     M_immnn:1 C9 02    CMP  #$02
$E998        M_rr:1 F0 0F    BEQ  +skip6  ; $E9A9
+skip5:
$E99A      M_impl:0 CA       DEX
$E99B        M_rr:1 10 F1    BPL  -loop1  ; $E98E
$E99D     M_immnn:1 A2 06    LDX  #$06
-loop2:
$E99F     M_nnnnX:2 BD DC EB LDA  sid_init_values,x  ; $EBDC,X
$E9A2     M_nnnnX:2 9D 00 D4 STA  $D400,X  ; reset sid voice1 values (ocean sound?)
$E9A5      M_impl:0 CA       DEX
$E9A6        M_rr:1 10 F7    BPL  -loop2  ; $E99F
$E9A8      M_impl:0 60       RTS
+skip6:
$E9A9        M_nn:1 C6 2A    DEC  whatis2  ; $2A
$E9AB        M_rr:1 10 04    BPL  +skip7  ; $E9B1
$E9AD     M_immnn:1 A9 05    LDA  #$05
$E9AF        M_nn:1 85 2A    STA  whatis2  ; $2A
+skip7:
$E9B1        M_nn:1 A5 2A    LDA  whatis2  ; $2A
$E9B3         M_A:0 0A       ASL  multiply by 2
$E9B4      M_impl:0 AA       TAX
$E9B5     M_nnnnX:2 BD 2C EE LDA  v1_ptboat_beep_beep_freq_array,x  ; $EE2C,X
$E9B8      M_nnnn:2 8D 00 D4 STA  $D400  ; v1_freq_lo
$E9BB     M_nnnnX:2 BD 2D EE LDA  v1_ptboat_beep_beep_freq_array+1,x  ; $EE2D,X
$E9BE      M_nnnn:2 8D 01 D4 STA  $D401  ; v1_freq_hi
$E9C1     M_immnn:1 A9 41    LDA  #$41  ; %0100 0001
$E9C3      M_nnnn:2 8D 04 D4 STA  $D404  ; v1_ctrl_reg  ; (pulse wave, gate on)  ; seems like the beep-beep of the P.T. boat
$E9C6      M_impl:0 60       RTS


start_game:
'---------
$E9C7      M_nnnn:2 20 93 EB JSR  init_game_vars  ; $EB93
$E9CA     M_immnn:1 A9 FF    LDA  #$FF
$E9CC        M_nn:1 85 16    STA  var4  ; $16
$E9CE        M_nn:1 A5 17    LDA  initial_game_time  ; $17
$E9D0        M_nn:1 85 28    STA  minutes_left  ; $28
$E9D2        M_nn:1 85 33    STA  var10  ; $33
$E9D4        M_nn:1 85 34    STA  var11  ; $34
$E9D6     M_immnn:1 A9 00    LDA  #$00
$E9D8        M_nn:1 85 1D    STA  p1_score_lo  ; var5  ; $1D
$E9DA        M_nn:1 85 1E    STA  var6  ; $1E
$E9DC        M_nn:1 85 1F    STA  p1_score_hi  ; var7  ; $1F
$E9DE        M_nn:1 85 20    STA  var8  ; $20
$E9E0      M_nnnn:2 20 7D E5 JSR  prepare_game_screen ; $E57D
$E9E3      M_nnnn:2 20 30 E9 JSR  init_sid  ; $E930
$E9E6     M_immnn:1 A9 3F    LDA  #$3F  ; %0011 1111
$E9E8      M_nnnn:2 8D 18 D4 STA  $D418 ; filter bandpass+low-pass, volume = 15
$E9EB      M_nnnn:2 20 58 EB JSR  game_loop  ; $EB58
$E9EE     M_immnn:1 A9 00    LDA  #$00   ; (no filter, zero volume)
$E9F0      M_nnnn:2 8D 18 D4 STA  $D418  ; sid_sel_filter_and_vol
$E9F3     M_immnn:1 A9 0A    LDA  #$0A
$E9F5        M_nn:1 85 14    STA  txt_y_pos  ; $14
$E9F7      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839

 :000E9FA 2D 27 33 2B 26 26 35 3C  2B 38 00 
           G  A  M  E        O  V   E  R

$EA05     M_immnn:1 A2 96    LDX  #$96
$EA07      M_nnnn:2 20 59 E7 JSR  $E759
$EA0A      M_impl:0 CA       DEX
$EA0B        M_rr:1 D0 FA    BNE  $EA07
$EA0D     M_immnn:1 A9 00    LDA  #$00
$EA0F        M_nn:1 85 16    STA  $16
$EA11      M_nnnn:2 20 CD E5 JSR  $E5CD
$EA14      M_impl:0 A8       TAY
$EA15        M_rr:1 D0 4A    BNE  $EA61
$EA17      M_nnnn:2 20 93 EB JSR  $EB93
$EA1A     M_immnn:1 A9 20    LDA  #$20
$EA1C        M_nn:1 85 27    STA  $27
$EA1E     M_immnn:1 A2 01    LDX  #$01
$EA20      M_nnnn:2 20 93 E8 JSR  $E893
$EA23     M_immnn:1 C9 28    CMP  #$28
$EA25        M_rr:1 B0 F9    BCS  $EA20
$EA27       M_nnX:1 95 35    STA  $35,X
$EA29      M_impl:0 CA       DEX
$EA2A        M_rr:1 10 F4    BPL  $EA20
$EA2C      M_nnnn:2 20 7D E5 JSR  $E57D
$EA2F     M_immnn:1 A9 0A    LDA  #$0A
$EA31        M_nn:1 85 14    STA  $14
$EA33      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839

 :000EA36 2D 27 33 2B 26 26 35 3C  2B 38 00
           G  A  M  E        O  V   E  R

$EA41     M_immnn:1 A9 0F    LDA  #$0F
$EA43        M_nn:1 85 14    STA  $14
$EA45      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839

 :000EA48 36 3B 39 2E 26 43 2C 47  43 26 3A 35 26 28 2B 2D  | 6;9.&C,GC&:5&(+-
           P  U  S  H     -  F  1   -     T  O     B  E  G
 :000EA58 2F 34 00
           I  N

$EA5B      M_nnnn:2 20 58 EB JSR  $EB58
$EA5E      M_impl:0 A8       TAY
$EA5F        M_rr:1 F0 AC    BEQ  $EA0D
$EA61      M_nnnn:2 20 99 E7 JSR  $E799
$EA64     M_immnn:1 A9 00    LDA  #$00
$EA66      M_nnnn:2 8D 15 D0 STA  $D015
$EA69      M_nnnn:2 8D 0D D4 STA  $D40D
$EA6C      M_nnnn:2 8D 14 D4 STA  $D414
$EA6F      M_nnnn:2 20 F3 E8 JSR  $E8F3
$EA72     M_immnn:1 A9 01    LDA  #$01
$EA74        M_nn:1 85 14    STA  $14
$EA76      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839

' trailing two zeroes of p1 score + highscore + p2 score
' ------------------------------------------------------
 :000EA79 F8 26 26 26 26 46 46 26  26 26 26 26 26 26 26 26  | .&&&&FF&&&&&&&&&
                          0  0                            
 :000EA89 26 26 26 46 46 26 26 26  26 26 26 26 26 26 26 26  | &&&FF&&&&&&&&&&&
                    0  0                                  
 :000EA99 26 46 46 00
              0  0

$EA9D     M_immnn:1 A9 05    LDA  #$05
$EA9F        M_nn:1 85 14    STA  $14
$EAA1      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839

 :000EAA4 43 26 36 3B 39 2E 26 43  00 
           -     P  U  S  H     -

$EAAD        M_nn:1 E6 14    INC  $14
$EAAF        M_nn:1 E6 14    INC  $14
$EAB1        M_nn:1 E6 14    INC  $14
$EAB3      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839

 :000EAB6 2C 47 26 3A 35 26 39 3A  27 38 3A 26 2D 27 33 2B  | ,G&:5&9:'8:&-'3+
           F  1     T  O     S  T   A  R  T     G  A  M  E
 :000EAC6 41 00
           .

$EAC8        M_nn:1 E6 14    INC  $14
$EACA        M_nn:1 E6 14    INC  $14
$EACC        M_nn:1 E6 14    INC  $14
$EACE      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839

 :000EAD1 2C 49 26 3A 35 26 26 2F  34 29 38 2B 27 39 2B 26  | ,I&:5&&/4)8+'9+&
           F  3     T  O        I   N  C  R  E  A  S  E  
 :000EAE1 00

$EAE2        M_nn:1 E6 14    INC  $14
$EAE4        M_nn:1 E6 14    INC  $14
$EAE6      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839

 :000EAE9 26 2C 4B 26 3A 35 26 26  2A 2B 29 38 2B 27 39 2B  | &,K&:5&&*+)8+'9+
              F  5     T  O         D  E  C  R  E  A  S  E
 :000EAF9 26 00

$EAFB        M_nn:1 E6 14    INC  $14
$EAFD        M_nn:1 E6 14    INC  $14
$EAFF      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839

 :000EB02 26 36 32 27 3F 2F 34 2D  26 3A 2F 33 2B 41 00
              P  L  A  Y  I  N  G      T  I  M  E  .

$EB11     M_immnn:1 A9 00    LDA  #$00
$EB13        M_nn:1 85 27    STA  $27
$EB15     M_immnn:1 A9 17    LDA  #$17
$EB17        M_nn:1 85 14    STA  $14
$EB19      M_nnnn:2 20 39 E8 JSR  draw_inline_text  ; $E839

 :000EB1C 36 32 27 3F 2F 34 2D 26  3A 2F 33 2B 00
           P  L  A  Y  I  N  G      T  I  M  E

$EB29        M_nn:1 A5 17    LDA  initial_game_time  ; $17
$EB2B        M_nn:1 85 28    STA  minutes_left  ; $28
-retry_loop1:
$EB2D      M_nnnn:2 20 73 E8 JSR  print_remaining_game_time  ; $E873
-retry_loop2:
$EB30      M_nnnn:2 20 68 E5 JSR  parent_routine_that_does_key_paddle_input  ; $E568
$EB33     M_immnn:1 C9 01    CMP  #$01   ; was paddle-fire or F1 pressed?
$EB35        M_rr:1 D0 03    BNE  skippy  ; $EB3A  ; if not, branch
$EB37      M_nnnn:2 4C C7 E9 JMP  start_game  ; $E9C7
+skippy:
$EB3A     M_immnn:1 C9 03    CMP  #$03  ; was F3 pressed? (increase time)
$EB3C        M_rr:1 D0 0D    BNE  +skip_next  ; $EB4B  ; if not, branch
$EB3E        M_nn:1 A5 28    LDA  $28
$EB40     M_immnn:1 C9 09    CMP  #$09
$EB42        M_rr:1 F0 EC    BEQ  -retry_loop2  ; $EB30  ; if already 9 minutes, can't increase further, branch back
$EB44        M_nn:1 E6 17    INC  initial_game_time  ; $17
$EB46        M_nn:1 E6 28    INC  minutes_left  ; $28
$EB48      M_nnnn:2 4C 2D EB JMP  -retry_loop1  ; $EB2D
+skip_next:
                 ; we're assuming if it's not paddle-fire, F1 or F3, then at this point, it must be F5 (decrease time)
$EB4B        M_nn:1 A5 28    LDA  minutes_left  ; $28
$EB4D     M_immnn:1 C9 01    CMP  #$01
$EB4F        M_rr:1 F0 DF    BEQ  -retry_loop2  ; $EB30
$EB51        M_nn:1 C6 17    DEC  initial_game_time  ; $17
$EB53        M_nn:1 C6 28    DEC  minutes_left  ; $28
$EB55      M_nnnn:2 4C 2D EB JMP  -retry_loop1  ; $EB2D


game_loop:
'--------
-loopback:
$EB58      M_nnnn:2 AD 1E D0 LDA  $D01E  ; sprite-to-sprite collision detect
$EB5B        M_nn:1 85 18    STA  buff_spr2spr_coll  ; $18
$EB5D      M_nnnn:2 AD 1F D0 LDA  $D01F  ; sprite-to-background collision detect
$EB60        M_nn:1 85 19    STA  buff_spr2back_coll  ; $19
$EB62      M_nnnn:2 20 00 E0 JSR  game_mechanics_iteration  ; $E000  ; has logic to spawn new ships when needed
$EB65      M_nnnn:2 20 C8 E1 JSR  buoy_logic  ; $E1C8
$EB68      M_nnnn:2 20 7D E2 JSR  handle_missile_firing_and_state  ; $E27D
$EB6B      M_nnnn:2 20 CE E3 JSR  redraw_player_submarines  ; $E3CE
$EB6E      M_nnnn:2 20 5F E4 JSR  bullet_redraw_and_ship_assessment  ; $E45F
$EB71        M_nn:1 A5 16    LDA  var4  ; $16
$EB73        M_rr:1 F0 03    BEQ  +skip1  ; $EB78
$EB75      M_nnnn:2 20 67 E9 JSR  assess_sound_states  ; $E967
+skip1:
$EB78      M_nnnn:2 20 4E E8 JSR  update_game_time_left  ; $E84E
$EB7B      M_nnnn:2 20 59 E7 JSR  timer_loop  ; $E759
$EB7E        M_nn:1 A5 16    LDA  var4  ; $16
$EB80        M_rr:1 D0 0A    BNE  +skip1  ; $EB8C
$EB82        M_nn:1 E6 1B    INC  dunno1  ; $1B
$EB84      M_nnnn:2 20 36 E5 JSR  paddle_and_function_key_reading_routine  ; $E536
$EB87      M_impl:0 A8       TAY
$EB88     M_immnn:1 C9 01    CMP  #$01
$EB8A        M_rr:1 F0 06    BEQ  +skip_to_end  ; $EB92  ; was paddle-fire or F1 pressed?
+skip1:
$EB8C        M_nn:1 A5 28    LDA  minutes_left  ; $28
$EB8E        M_nn:1 05 27    ORA  decimal_secs_in_minutes_left  ; $27
$EB90        M_rr:1 D0 C6    BNE  -loopback  ; $EB58
+skip_to_end:
$EB92      M_impl:0 60       RTS


init_game_vars:
'--------------
$EB93     M_immnn:1 A2 82    LDX  #$82
$EB95     M_immnn:1 A9 00    LDA  #$00
$EB97      M_nnnn:2 8D 15 D0 STA  $D015  ; sprite display enable/disable  (this will disable them all)
-loop1:
$EB9A       M_nnX:1 95 22    STA  $22,X  ; reset vars in range of $22 to $A4 to zero
$EB9C      M_impl:0 CA       DEX
$EB9D        M_rr:1 D0 FB    BNE  -loop1  ; $EB9A
$EB9F     M_immnn:1 A9 04    LDA  #$04
$EBA1        M_nn:1 85 31    STA  p1_num_missiles  ; $31
$EBA3        M_nn:1 85 32    STA  p2_num_missiles  ; $32
$EBA5     M_immnn:1 A9 00    LDA  #$00
$EBA7        M_nn:1 85 61    STA  var20  ; $61
$EBA9     M_immnn:1 A9 44    LDA  #$44
$EBAB        M_nn:1 85 62    STA  var21  ; $62
$EBAD     M_immnn:1 A9 60    LDA  #$60
$EBAF        M_nn:1 85 65    STA  var25  ; $65
$EBB1        M_nn:1 85 66    STA  var26  ; $66
$EBB3     M_immnn:1 A9 01    LDA  #$01
$EBB5        M_nn:1 85 5D    STA  var15  ; $5D
$EBB7        M_nn:1 85 5E    STA  var16  ; $5E
$EBB9     M_immnn:1 A9 3B    LDA  #$3B
$EBBB        M_nn:1 85 26    STA  var9  ; $26
$EBBD      M_impl:0 60       RTS

sid_init_values:
 :000EBDC 88 13 00 08 81 00 21 98  3A 00 08 80 8C 4B B0 04  | ......!.:....K..
 :000EBEC 00 08 80 00 FA 00 96 F4  30                       | ........0

' VOICE1  (ocean sound?)
' ------
' $d400 = v1_freq_lo = $88
' $d401 = v1_freq_hi = $13
' $d402 = v1_pulse_lo = $00
' $d403 = v1_pulse_hi = $08
' $d404 = $81 = %1000 0001
'    $d404.7 = select noise = on
'    $d404.6 = select pulse = off
'    $d404.5 = select sawtooth = off
'    $d404.4 = select triangle = off
'    $d404.3 = disable oscillator 1 = off
'    $d404.2 = ring mod osc1 with osc3 = off
'    $d404.1 = sync osc1 with osc3 freq = off
'    $d404.0 = gate = on (start att/dec/sus)
' $d405 = v1_env_att_dec = $00 = %0000 0000
'    $d405.7-4 = attack = 0
'    $d405.3-0 = decay = 0
' $d406 = v1_env_sus_rel = $21 = %0010 0001
'    $d406.7-4 = sustain = 2
'    $d406.3-0 = release = 1
'
' VOICE2  (fire sound?)
' ------	
' $d407 = v2_freq_lo = $98
' $d408 = v2_freq_hi = $3A
' $d409 = v2_pulse_lo = $00
' $d40a = v2_pulse_hi = $08
' $d40b = $80 = %1000 0000
'    $d40b.7 = select noise = on
'    $d40b.6 = select pulse = off
'    $d40b.5 = select sawtooth = off
'    $d40b.4 = select triangle = off
'    $d40b.3 = disable oscillator 2 = off
'    $d40b.2 = ring mod osc2 with osc1 = off
'    $d40b.1 = sync osc2 with osc1 freq = off
'    $d40b.0 = gate = off (start att/dec/sus)
' $d40c = v2_env_att_dec = $8C = %1000 1100
'    $d40c.7-4 = attack = 8
'    $d40c.3-0 = decay = 12
' $d40d = v2_env_sus_rel = $4B = %0100 1011
'    $d40d.7-4 = sustain = 4
'    $d40d.3-0 = release = 11
'
' VOICE3  (explosion sound?)
' ------	
' $d40e = v3_freq_lo = $B0
' $d40f = v3_freq_hi = $04
' $d410 = v3_pulse_lo = $00
' $d411 = v3_pulse_hi = $08
' $d412 = $80 = %1000 0000
'    $d412.7 = select noise = on
'    $d412.6 = select pulse = off
'    $d412.5 = select sawtooth = off
'    $d412.4 = select triangle = off
'    $d412.3 = disable oscillator 3 = off
'    $d412.2 = ring mod osc3 with osc2 = off
'    $d412.1 = sync osc3 with osc2 freq = off
'    $d412.0 = gate = off (start att/dec/sus)
' $d413 = v3_env_att_dec = $00 = %0000 0000
'    $d413.7-4 = attack = 0
'    $d413.3-0 = decay = 0
' $d414 = v3_env_sus_rel = $FA %1111 1010
'    $d414.7-4 = sustain = 15
'    $d414.3-0 = release = 10
'
' FILTERS/VOLUME
' --------------
' $d415 = filter_cutoff_freq_lo (2-0) = $00
' $d416 = filter_cutoff_freq_hi (10-3) = $96
' $d417 = $F4 = %1111 0100
'    $d417.7-4 = filter resonance = 15
'    $d417.3 = filter external input = 0 (no)
'    $d417.2 = filter v3 output = 1 (yes)
'    $d417.1 = filter v2 output = 0 (no)
'    $d417.0 = filter v1 output = 0 (no)
' $d418 = $30 = %0011 0000
'    $d418.7 = cut-off v3 output = 0 (on)
'    $d418.6 = filter high-pass mode = 0 (off)
'    $d418.5 = filter band-pass mode = 1 (on)
'    $d418.4 = filter low-pass mode = 1 (on)
'    $d418.3-0 = output volume = 4


scr_row_ptr_lo:
'-------------
 :000EDDC 00 28 50 78 A0 C8 F0 18  40 68 90 B8 E0 08 30 58  | .(Px....@h....0X
 :000EDEC 80 A8 D0 F8 20 48 70 98  C0                       | .... Hp..

scr_row_ptr_hi:
'-------------
 :000EDF5 04 04 04 04 04 04 04 05  05 05 05 05 05 06 06 06  | ................
 :000EE05 06 06 06 06 07 07 07 07  07                       | .........

    E.g., taking the same index of each array gets you:
        scr_row_ptr[0] = $0400
        scr_row_ptr[1] = $0428
        scr_row_ptr[2] = $0450
        scr_row_ptr[3] = $0478
        scr_row_ptr[4] = $04A0
        scr_row_ptr[5] = $04C8
        scr_row_ptr[6] = $04F0
        scr_row_ptr[7] = $0518
        scr_row_ptr[8] = $0540
        scr_row_ptr[9] = $0568
        scr_row_ptr[10] = $0590
        scr_row_ptr[11] = $05B8
        scr_row_ptr[12] = $05E0
        scr_row_ptr[13] = $0608
        scr_row_ptr[14] = $0630
        scr_row_ptr[15] = $0658
        scr_row_ptr[16] = $0680
        scr_row_ptr[17] = $06A8
        scr_row_ptr[18] = $06D0
        scr_row_ptr[19] = $06F8
        scr_row_ptr[20] = $0720
        scr_row_ptr[21] = $0748
        scr_row_ptr[22] = $0770
        scr_row_ptr[23] = $0798
        scr_row_ptr[24] = $07C0


some_table:  (used by ADC at $e091 and compared against #$a0 = 160)
 :000EE0E 18 18 10 00 0A 20 46 68  20 24 58 20 24 30 02 01  | ..... Fh $X $0..
 :000EE1E 00                                                | .
  - dec: 24, 24, 16, 0, 10, 32, 70

some_other_table:  (used by lda at $e181)
 :000EE13 20 46 68 20 24 58 20 24  30 02 01 00 02 05 0A 60  |  Fh $X $0......`
  - groups of 3 (relating to ship-type in some way)
  - [0] = 20 46 68
  - [1] = 20 24 58
  - [2] = 20 24 30

yet_another_table:
 :000EE1C 02 01 00 
  - index is the newly-spawned ship-type ($e19f)

ship_scores:
 :000EE1F 02 05 0A
    ; Freighter = 200 points
    ;   Cruiser = 500 points
    ; P.T. boat = 1000 points

possible_buoy_y_positions:
 :000EE22 60 80                                             | `.

    $60 = 96
    $80 = 128

screen_offsets_for_each_missile:
' (in the indicator group of 4 per player)
 :000EE24 2F 07 2A 02

    $2F = 47
    $07 = 7
    $2A = 42
    $02 = 2

kooky_screen_locations:
 :000EE28 00 28 01 29
  - $00 = 0
  - $28 = 40
  - $01 = 1
  - $29 = 41

v1_ptboat_beep_beep_freq_array:
 :000EE2C 00 00 E8 4E 00 00 00 00  00 00 E8 4E
  - [0] = $0000
  - [1] = $4EE8
  - [2] = $0000
  - [3] = $0000
  - [4] = $0000
  - [5] = $4EE8


or_bitfields:
 :000EE38 01 02 04 08 10 20 40 80
   - $01 = %0000 0001
   - $02 = %0000 0010
   - $04 = %0000 0100
   - $08 = %0000 1000
   - $10 = %0001 0000
   - $20 = %0010 0000
   - $40 = %0100 0000
   - $80 = %1000 0000

and_bitfields:
 :000EE40 FE FD FB F7 EF DF BF 7F
   - $FE = %1111 1110
   - $FD = %1111 1101
   - $FB = %1111 1011
   - $F7 = %1111 0111
   - $EF = %1110 1111
   - $DF = %1101 1111
   - $BF = %1011 1111
   - $7F = %0111 1111


some_screen_row_related_data:
 :000EE48 00 00 00 3F FF FF 3F 00  01 07 07 FF FF FF FF 00  | ...?..?.........
 :000EE58 80 E0 E0 FF FF FF FF 00  00 00 00 FC FF FF FC 00  | ................
 :000EE68 00 00 00 00 00 00 00 00  00 00 00 0F 3F 3F 0F 00  | ............??..
 :000EE78 00 01 01 FF FF FF FF 00  60 F8 F8 FF FF FF FF 00  | ........`.......
 :000EE88 00 00 00 FF FF FF FF 00  00 00 00 00 C0 C0 00 00  | ................
 :000EE98 00 00 00 03 0F 0F 03 00  00 00 00 FF FF FF FF 00  | ................
 :000EEA8 18 7E 7E FF FF FF FF 00  00 00 00 FF FF FF FF 00  | .~~.............
 :000EEB8 00 00 00 C0 F0 F0 C0 00  00 00 00 00 03 03 00 00  | ................
 :000EEC8 00 00 00 FF FF FF FF 00  06 1F 1F FF FF FF FF 00  | ................
 :000EED8 00 80 80 FF FF FF FF 00  00 00 00 F0 FC FC F0 00  | ................

scr_row_lsb:
 :000EEE8 00 28 50 78

kooky2_table:
 :000EEEC 00 00 40 E0 E0 E0 E0 40

kooky3_table:
 :000EEF4 00 00 00 00 00 00 00 00                           | ........

some_colour_chooser_table:
 :000EFAC 07 07 07 07 08 08 08 08                           | ........

  - a choice between yellow or light brown, with index from 0-7

another_kooky_table:
 :000EFB4 00 00 00 00 00 40 40 40  80 80 80 80

some_kooky_table:
 :000EFC0 01 01 01 01 01 01 02 02  02 02 03 03 3F 35 3B 38  | ............?5;8


read_paddle_position:
--------------------
$F0F0      M_impl:0 AA       TAX
$F0F1      M_impl:0 38       SEC
$F0F2     M_immnn:1 A9 C8    LDA  #$C8  ; dec200
$F0F4     M_nnnnX:2 FD 19 D4 SBC  $D419,X  ; adc paddle1 pos ($d419) or paddle2 pos ($d41a)
$F0F7        M_rr:1 B0 02    BCS  +branch_if_>=200  ; $F0FB  ; branch if 200 >= current paddle pos of player
$F0F9     M_immnn:1 A9 00    LDA  #$00
+branch_if_>=200:
$F0FB        M_nn:1 85 08    STA  var0  ; $08
$F0FD         M_A:0 4A       LSR
$F0FE      M_impl:0 18       CLC
$F0FF        M_nn:1 65 08    ADC  var0  ; $08
$F101         M_A:0 6A       ROR
$F102     M_immnn:1 A0 00    LDY  #$00
$F104        M_nn:1 84 08    STY  var0  ; $08
$F106     M_immnn:1 A0 03    LDY  #$03
-retry1:
$F108      M_impl:0 18       CLC
$F109       M_nnX:1 75 FE    ADC  array30,x  ; $FE,X
$F10B        M_rr:1 90 02    BCC  +skip1  ; $F10F
$F10D        M_nn:1 E6 08    INC  var0  ; $08
+skip1:
$F10F      M_impl:0 88       DEY
$F110        M_rr:1 D0 F6    BNE  -retry1  ; $F108
$F112        M_nn:1 66 08    ROR  var0  ; $08
$F114         M_A:0 6A       ROR
$F115        M_nn:1 66 08    ROR  var0  ; $08
$F117         M_A:0 6A       ROR
$F118      M_impl:0 38       SEC
$F119     M_immnn:1 E9 02    SBC  #$02
$F11B        M_rr:1 B0 02    BCS  +skip2  ; $F11F
$F11D     M_immnn:1 A9 00    LDA  #$00
+skip2
$F11F       M_nnX:1 95 FE    STA  array30,x  ; $FE,X
$F121      M_impl:0 60       RTS


set_sprite_colour:
'----------------
$F125     M_nnnnX:2 BD 2C F1 LDA  $F12C,X
$F128     M_nnnnX:2 9D 27 D0 STA  $D027,X
$F12B      M_impl:0 60       RTS
